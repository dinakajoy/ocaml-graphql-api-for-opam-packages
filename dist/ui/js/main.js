// Generated by js_of_ocaml 3.9.1
(function(joo_global_object)
   {"use strict";
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return this.c
        }};
    MlBytes.prototype.toUtf16
    =
    function()
     {var r=this.toString();
      if(this.t == 9)return r;
      return caml_utf16_of_utf8(r)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    var caml_ba_custom_name="_bigarr02";
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_js_from_array(a){return a.slice(1)}
    function caml_ba_create(kind,layout,dims_ml)
     {var
       dims=caml_js_from_array(dims_ml),
       data=caml_ba_create_buffer(kind,caml_ba_get_size(dims));
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_dim(ba,i)
     {if(i < 0 || i >= ba.dims.length)caml_invalid_argument("Bigarray.dim");
      return ba.dims[i]}
    function caml_ba_dim_1(ba){return caml_ba_dim(ba,0)}
    function caml_ba_get_1(ba,i0){return ba.get(ba.offset(i0))}
    function caml_convert_bytes_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_bytes_of_string(s){return s}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function caml_ml_bytes_length(s){return s.l}
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_bigstring_blit_string_to_ba(str1,pos1,ba2,pos2,len)
     {if(12 != ba2.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs2=ba2.offset(pos2);
      if(pos1 + len > caml_ml_string_length(str1))caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=caml_array_of_string(str1).slice(pos1,pos1 + len);
      ba2.data.set(slice,ofs2);
      return 0}
    var caml_blit_string_to_bigstring=caml_bigstring_blit_string_to_ba;
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      if(ba.caml_custom == "_bigarr02")
       for(var i=0;i < ba.dims.length;i++)
        if(ba.dims[i] < 0xffff)
         writer.write(16,ba.dims[i]);
        else
         {writer.write(16,0xffff);
          writer.write(32,0);
          writer.write(32,ba.dims[i])}
      else
       for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz,name)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      if(name == "_bigarr02")
       for(var i=0;i < num_dims;i++)
        {var size_dim=reader.read16u();
         if(size_dim == 0xffff)
          {var size_dim_hi=reader.read32u(),size_dim_lo=reader.read32u();
           if(size_dim_hi != 0)
            caml_failwith("input_value: bigarray dimension overflow in 32bit");
           size_dim = size_dim_lo}
         dims.push(size_dim)}
      else
       for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarray")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarr02")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_float_of_string(s)
     {var res;
      s = caml_jsbytes_of_string(s);
      res = + s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = + s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[4] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return - Infinity;
      caml_failwith("float_of_string")}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_jsstring_of_string(s){return s.toUtf16()}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = caml_jsbytes_of_string(name);
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))
       this.content[name] = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       this.content[name] = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         this.content[name] = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           this.content[name] = new MlFakeFile(bytes)}
         else
          caml_raise_sys_error
           (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_bytes(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var
       a=new (joo_global_object.Uint8Array)(1),
       buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return buffer[0]};
    MlNodeFile.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try
       {return this.fs.existsSync(this.nm(name))?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.readdir
    =
    function(name)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.rename
    =
    function(o,n)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0];
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_create_file(name,content)
     {var
       name=typeof name == "string"?caml_string_of_jsbytes(name):name,
       content=
        typeof content == "string"?caml_string_of_jsbytes(content):content,
       root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_meth_call(o,f,args)
     {return o[caml_jsstring_of_string(f)].apply(o,caml_js_from_array(args))}
    function caml_js_to_array(a)
     {var len=a.length,b=new Array(len + 1);
      b[0] = 0;
      for(var i=0;i < len;i++)b[i + 1] = a[i];
      return b}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_refill_input(chan)
     {var str=chan.refill(),str_len=caml_ml_string_length(str);
      if(str_len == 0)chan.refill = null;
      chan.file.write(chan.file.length(),str,0,str_len);
      return str_len}
    function caml_ml_input(chanid,s,i,l)
     {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
      if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
      if(l2 < l)l = l2;
      chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
      return l}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_string_of_jsbytes(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_string_of_bytes(s){return s}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var bytes;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       bytes = buffer;
      else
       {bytes = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,bytes,0,len)}
      var
       string=caml_string_of_bytes(bytes),
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_backend_type()
     {return [0,caml_string_of_jsbytes("js_of_ocaml")]}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    caml_fs_init();
    var
     Out_of_memory=[248,caml_string_of_jsbytes("Out_of_memory"),-1],
     Sys_error=[248,caml_string_of_jsbytes("Sys_error"),-2],
     Failure=[248,caml_string_of_jsbytes("Failure"),-3],
     Invalid_argument=[248,caml_string_of_jsbytes("Invalid_argument"),-4],
     End_of_file=[248,caml_string_of_jsbytes("End_of_file"),-5],
     Division_by_zero=[248,caml_string_of_jsbytes("Division_by_zero"),-6],
     Not_found=[248,caml_string_of_jsbytes("Not_found"),-7],
     Match_failure=[248,caml_string_of_jsbytes("Match_failure"),-8],
     Stack_overflow=[248,caml_string_of_jsbytes("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_string_of_jsbytes("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
     param=
      [0,
       [11,caml_string_of_jsbytes("invalid box description "),[3,0,0]],
       caml_string_of_jsbytes("invalid box description %S")],
     opt=[0,103],
     locfmt=
      [0,
       [11,
        caml_string_of_jsbytes('File "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
     fmt$0=[0,[8,[0,0,3],0,[0,16],0],caml_string_of_jsbytes("%.16g")],
     fmt=
      [0,
       [15,[11,caml_string_of_jsbytes(" encoded but expected "),[2,0,0]]],
       caml_string_of_jsbytes("%a encoded but expected %s")],
     partial=
      [17,
       [0,caml_string_of_jsbytes("@ "),1,0],
       [11,caml_string_of_jsbytes("stream"),[17,0,0]]],
     partial$0=[17,[0,caml_string_of_jsbytes("@ "),1,0],[12,40,0]],
     partial$1=
      [11,
       caml_string_of_jsbytes("('\"'"),
       [17,
        [0,caml_string_of_jsbytes("@ "),1,0],
        [11,
         caml_string_of_jsbytes("or"),
         [17,
          [0,caml_string_of_jsbytes("@ "),1,0],
          [11,caml_string_of_jsbytes("'}')"),[17,0,0]]]]]],
     partial$2=[0,caml_string_of_jsbytes("@ "),1,0],
     partial$3=
      [11,
       caml_string_of_jsbytes("(','"),
       [17,
        [0,caml_string_of_jsbytes("@ "),1,0],
        [11,
         caml_string_of_jsbytes("or"),
         [17,
          [0,caml_string_of_jsbytes("@ "),1,0],
          [11,caml_string_of_jsbytes("'}')"),[17,0,0]]]]]],
     partial$4=[0,caml_string_of_jsbytes("@ "),1,0],
     partial$5=
      [11,
       caml_string_of_jsbytes("or"),
       [17,
        [0,caml_string_of_jsbytes("@ "),1,0],
        [11,caml_string_of_jsbytes("']')"),[17,0,0]]]],
     partial$6=[0,caml_string_of_jsbytes("@ "),1,0],
     partial$7=
      [11,
       caml_string_of_jsbytes("(','"),
       [17,
        [0,caml_string_of_jsbytes("@ "),1,0],
        [11,
         caml_string_of_jsbytes("or"),
         [17,
          [0,caml_string_of_jsbytes("@ "),1,0],
          [11,caml_string_of_jsbytes("']')"),[17,0,0]]]]]],
     partial$8=[0,caml_string_of_jsbytes("@ "),1,0],
     partial$9=
      [17,[0,caml_string_of_jsbytes("@ "),1,0],[12,40,[15,[12,41,[17,0,0]]]]],
     err_bom=[0,106380200,-543455433],
     err_unclosed_comment=[0,106380200,[0,-364210971,-826170817]],
     err_unclosed_string=[0,106380200,[0,-364210971,-976970511]],
     err_unclosed_arr=[0,106380200,[0,-364210971,14610]],
     err_unclosed_obj=[0,106380200,[0,-364210971,17732]],
     err_exp_comment=[0,106380200,[0,434236056,-826170817]],
     err_exp_value=[0,106380200,[0,434236056,-991563951]],
     err_exp_name=[0,106380200,[0,434236056,869834347]],
     err_exp_nsep=[0,106380200,[0,434236056,713199754]],
     err_exp_arr_fst=[0,106380200,[0,434236056,[0,726711616,1]]],
     err_exp_arr_nxt=[0,106380200,[0,434236056,[0,726711616,0]]],
     err_exp_obj_fst=[0,106380200,[0,434236056,[0,881518886,1]]],
     err_exp_obj_nxt=[0,106380200,[0,434236056,[0,881518886,0]]],
     err_exp_json=[0,106380200,[0,434236056,826371656]],
     err_exp_eoi=[0,106380200,[0,434236056,3456159]],
     fmt$1=
      [0,
       [11,
        caml_string_of_jsbytes("Cstruct.blit_from_string src="),
        [15,
         [11,
          caml_string_of_jsbytes(" dst="),
          [15,
           [11,
            caml_string_of_jsbytes(" dst-off="),
            [4,0,0,0,[11,caml_string_of_jsbytes(" len="),[4,0,0,0,0]]]]]]]],
       caml_string_of_jsbytes
        ("Cstruct.blit_from_string src=%a dst=%a dst-off=%d len=%d")],
     fmt$2=[0,[17,3,[15,[17,4,0]]],caml_string_of_jsbytes("@\n%a@.")],
     src=caml_string_of_jsbytes(""),
     fmt$3=
      [0,
       [11,caml_string_of_jsbytes("JSON.of_buffer "),[2,0,0]],
       caml_string_of_jsbytes("JSON.of_buffer %s")],
     package_query=
      caml_string_of_jsbytes
       ("\n   {\n    packages {\n      id\n      name\n      version\n    }\n  }\n");
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _g_=caml_string_of_jsbytes("input"),
     _f_=caml_string_of_jsbytes("output_substring"),
     _e_=caml_string_of_jsbytes("output"),
     _d_=caml_string_of_jsbytes("%.12g"),
     _c_=caml_string_of_jsbytes("."),
     _a_=caml_string_of_jsbytes("true"),
     _b_=caml_string_of_jsbytes("false"),
     _h_=caml_string_of_jsbytes("\\\\"),
     _i_=caml_string_of_jsbytes("\\'"),
     _j_=caml_string_of_jsbytes("\\b"),
     _k_=caml_string_of_jsbytes("\\t"),
     _l_=caml_string_of_jsbytes("\\n"),
     _m_=caml_string_of_jsbytes("\\r"),
     _n_=caml_string_of_jsbytes(" is not an Unicode scalar value"),
     _o_=caml_string_of_jsbytes("%X"),
     _q_=caml_string_of_jsbytes("tl"),
     _p_=caml_string_of_jsbytes("hd"),
     _t_=caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     _s_=caml_string_of_jsbytes("Bytes.blit"),
     _r_=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     _u_=caml_string_of_jsbytes("Stdlib.Queue.Empty"),
     _A_=caml_string_of_jsbytes("Buffer.add_substring/add_subbytes"),
     _z_=caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     _y_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _x_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _w_=caml_string_of_jsbytes("Buffer.blit"),
     _v_=caml_string_of_jsbytes("Buffer.sub"),
     _J_=caml_string_of_jsbytes("%c"),
     _K_=caml_string_of_jsbytes("%s"),
     _L_=caml_string_of_jsbytes("%i"),
     _M_=caml_string_of_jsbytes("%li"),
     _N_=caml_string_of_jsbytes("%ni"),
     _O_=caml_string_of_jsbytes("%Li"),
     _P_=caml_string_of_jsbytes("%f"),
     _Q_=caml_string_of_jsbytes("%B"),
     _R_=caml_string_of_jsbytes("%{"),
     _S_=caml_string_of_jsbytes("%}"),
     _T_=caml_string_of_jsbytes("%("),
     _U_=caml_string_of_jsbytes("%)"),
     _V_=caml_string_of_jsbytes("%a"),
     _W_=caml_string_of_jsbytes("%t"),
     _X_=caml_string_of_jsbytes("%?"),
     _Y_=caml_string_of_jsbytes("%r"),
     _Z_=caml_string_of_jsbytes("%_r"),
     ___=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _aj_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _ab_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _ak_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _ac_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _al_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _ad_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _am_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     _ae_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _an_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _af_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _ah_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _$_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _ai_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _aa_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _ag_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _bj_=caml_string_of_jsbytes("%u"),
     _bh_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _bi_=caml_string_of_jsbytes("Printf: bad conversion %["),
     _bk_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _bl_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _bm_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _bn_=caml_string_of_jsbytes("Printf: bad conversion %_"),
     _bo_=caml_string_of_jsbytes("@{"),
     _bp_=caml_string_of_jsbytes("@["),
     _bq_=caml_string_of_jsbytes("@{"),
     _br_=caml_string_of_jsbytes("@["),
     _bs_=caml_string_of_jsbytes(""),
     _bt_=[0,0,4],
     _bu_=caml_string_of_jsbytes(""),
     _bv_=caml_string_of_jsbytes("b"),
     _bw_=caml_string_of_jsbytes("h"),
     _bx_=caml_string_of_jsbytes("hov"),
     _by_=caml_string_of_jsbytes("hv"),
     _bz_=caml_string_of_jsbytes("v"),
     _bg_=caml_string_of_jsbytes("nan"),
     _be_=caml_string_of_jsbytes("neg_infinity"),
     _bf_=caml_string_of_jsbytes("infinity"),
     _bd_=caml_string_of_jsbytes("."),
     _a3_=caml_string_of_jsbytes("%+nd"),
     _a4_=caml_string_of_jsbytes("% nd"),
     _a6_=caml_string_of_jsbytes("%+ni"),
     _a7_=caml_string_of_jsbytes("% ni"),
     _a8_=caml_string_of_jsbytes("%nx"),
     _a9_=caml_string_of_jsbytes("%#nx"),
     _a__=caml_string_of_jsbytes("%nX"),
     _a$_=caml_string_of_jsbytes("%#nX"),
     _ba_=caml_string_of_jsbytes("%no"),
     _bb_=caml_string_of_jsbytes("%#no"),
     _a2_=caml_string_of_jsbytes("%nd"),
     _a5_=caml_string_of_jsbytes("%ni"),
     _bc_=caml_string_of_jsbytes("%nu"),
     _aQ_=caml_string_of_jsbytes("%+ld"),
     _aR_=caml_string_of_jsbytes("% ld"),
     _aT_=caml_string_of_jsbytes("%+li"),
     _aU_=caml_string_of_jsbytes("% li"),
     _aV_=caml_string_of_jsbytes("%lx"),
     _aW_=caml_string_of_jsbytes("%#lx"),
     _aX_=caml_string_of_jsbytes("%lX"),
     _aY_=caml_string_of_jsbytes("%#lX"),
     _aZ_=caml_string_of_jsbytes("%lo"),
     _a0_=caml_string_of_jsbytes("%#lo"),
     _aP_=caml_string_of_jsbytes("%ld"),
     _aS_=caml_string_of_jsbytes("%li"),
     _a1_=caml_string_of_jsbytes("%lu"),
     _aD_=caml_string_of_jsbytes("%+Ld"),
     _aE_=caml_string_of_jsbytes("% Ld"),
     _aG_=caml_string_of_jsbytes("%+Li"),
     _aH_=caml_string_of_jsbytes("% Li"),
     _aI_=caml_string_of_jsbytes("%Lx"),
     _aJ_=caml_string_of_jsbytes("%#Lx"),
     _aK_=caml_string_of_jsbytes("%LX"),
     _aL_=caml_string_of_jsbytes("%#LX"),
     _aM_=caml_string_of_jsbytes("%Lo"),
     _aN_=caml_string_of_jsbytes("%#Lo"),
     _aC_=caml_string_of_jsbytes("%Ld"),
     _aF_=caml_string_of_jsbytes("%Li"),
     _aO_=caml_string_of_jsbytes("%Lu"),
     _aq_=caml_string_of_jsbytes("%+d"),
     _ar_=caml_string_of_jsbytes("% d"),
     _at_=caml_string_of_jsbytes("%+i"),
     _au_=caml_string_of_jsbytes("% i"),
     _av_=caml_string_of_jsbytes("%x"),
     _aw_=caml_string_of_jsbytes("%#x"),
     _ax_=caml_string_of_jsbytes("%X"),
     _ay_=caml_string_of_jsbytes("%#X"),
     _az_=caml_string_of_jsbytes("%o"),
     _aA_=caml_string_of_jsbytes("%#o"),
     _ap_=caml_string_of_jsbytes("%d"),
     _as_=caml_string_of_jsbytes("%i"),
     _aB_=caml_string_of_jsbytes("%u"),
     _B_=caml_string_of_jsbytes("@]"),
     _C_=caml_string_of_jsbytes("@}"),
     _D_=caml_string_of_jsbytes("@?"),
     _E_=caml_string_of_jsbytes("@\n"),
     _F_=caml_string_of_jsbytes("@."),
     _G_=caml_string_of_jsbytes("@@"),
     _H_=caml_string_of_jsbytes("@%"),
     _I_=caml_string_of_jsbytes("@"),
     _ao_=caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     _bD_=caml_string_of_jsbytes(""),
     _bE_=
      [0,
       [11,caml_string_of_jsbytes(", "),[2,0,[2,0,0]]],
       caml_string_of_jsbytes(", %s%s")],
     _bJ_=caml_string_of_jsbytes("Out of memory"),
     _bK_=caml_string_of_jsbytes("Stack overflow"),
     _bL_=caml_string_of_jsbytes("Pattern matching failed"),
     _bM_=caml_string_of_jsbytes("Assertion failed"),
     _bN_=caml_string_of_jsbytes("Undefined recursive module"),
     _bF_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
     _bG_=caml_string_of_jsbytes(""),
     _bH_=caml_string_of_jsbytes(""),
     _bI_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _bC_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bA_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _bB_=caml_string_of_jsbytes("_"),
     _bP_=caml_string_of_jsbytes("Fun.Finally_raised: "),
     _bO_=caml_string_of_jsbytes("Stdlib.Fun.Finally_raised"),
     _b9_=[3,0,3],
     _b__=caml_string_of_jsbytes("."),
     _b6_=caml_string_of_jsbytes(">"),
     _b7_=caml_string_of_jsbytes("<\/"),
     _b8_=caml_string_of_jsbytes(""),
     _b3_=caml_string_of_jsbytes(">"),
     _b4_=caml_string_of_jsbytes("<"),
     _b5_=caml_string_of_jsbytes(""),
     _b2_=caml_string_of_jsbytes("\n"),
     _bY_=caml_string_of_jsbytes(""),
     _bZ_=caml_string_of_jsbytes(""),
     _b0_=caml_string_of_jsbytes(""),
     _b1_=caml_string_of_jsbytes(""),
     _bX_=[0,caml_string_of_jsbytes("")],
     _bT_=caml_string_of_jsbytes(""),
     _bU_=caml_string_of_jsbytes(""),
     _bV_=caml_string_of_jsbytes(""),
     _bW_=caml_string_of_jsbytes(""),
     _bS_=[0,caml_string_of_jsbytes(""),0,caml_string_of_jsbytes("")],
     _bR_=caml_string_of_jsbytes(""),
     _bQ_=caml_string_of_jsbytes("Stdlib.Format.String_tag"),
     _b$_=caml_string_of_jsbytes("Js_of_ocaml__Js.Error"),
     _ca_=caml_string_of_jsbytes("jsError"),
     _cc_=caml_string_of_jsbytes("td"),
     _cb_=caml_string_of_jsbytes("tr"),
     _cq_=[0,caml_string_of_jsbytes("src/uutf.ml"),364,9],
     _cl_=[0,-211555818,3299808],
     _cg_=[0,-211558048,3299808],
     _cm_=[0,684370880,3299808],
     _ck_=[0,684370880,427938126],
     _ch_=[0,-211558048,427938126],
     _ci_=[0,caml_string_of_jsbytes("src/uutf.ml"),154,55],
     _cj_=[0,684370880,427938126],
     _cn_=[0,caml_string_of_jsbytes("src/uutf.ml"),153,55],
     _co_=[0,caml_string_of_jsbytes("src/uutf.ml"),155,55],
     _cp_=[0,684370880,3455931],
     _cf_=[0,caml_string_of_jsbytes("src/uutf.ml"),121,9],
     _cd_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid bounds (index "),
        [4,0,0,0,[11,caml_string_of_jsbytes(", length "),[4,0,0,0,[12,41,0]]]]],
       caml_string_of_jsbytes("invalid bounds (index %d, length %d)")],
     _ce_=
      [0,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       4,
       4,
       4,
       4,
       4,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0],
     _de_=caml_string_of_jsbytes("false"),
     _df_=caml_string_of_jsbytes("null"),
     _dg_=caml_string_of_jsbytes("true"),
     _dh_=[0,-633954146,[0,737456202,1]],
     _di_=[0,-633954146,870828711],
     _dj_=[0,-633954146,[0,737456202,0]],
     _dl_=[0,-633954146,14610],
     _dk_=[0,-633954146,17732],
     _do_=[0,caml_string_of_jsbytes("src/jsonm.ml"),398,27],
     _dA_=caml_string_of_jsbytes("\\u00"),
     _dz_=caml_string_of_jsbytes("\\\\"),
     _dy_=caml_string_of_jsbytes('\\"'),
     _dx_=caml_string_of_jsbytes("\\n"),
     _dE_=caml_string_of_jsbytes("//"),
     _dF_=caml_string_of_jsbytes("*/"),
     _dG_=caml_string_of_jsbytes("/*"),
     _dB_=caml_string_of_jsbytes("null"),
     _dC_=caml_string_of_jsbytes("true"),
     _dD_=caml_string_of_jsbytes("false"),
     _dv_=caml_string_of_jsbytes("`Lexeme `Ae"),
     _dw_=caml_string_of_jsbytes("`Lexeme `Oe"),
     _du_=
      caml_string_of_jsbytes
       ("`Lexeme (`Null | `Bool _ | `Float _ | `String _ | `As | `Os)"),
     _dt_=caml_string_of_jsbytes("`Lexeme (`Name _ | `Oe)"),
     _ds_=caml_string_of_jsbytes("any `Lexeme but `Name or `Oe"),
     _dr_=caml_string_of_jsbytes("any `Lexeme but `Name, `Oe or `Ae"),
     _dq_=caml_string_of_jsbytes("`End"),
     _dp_=caml_string_of_jsbytes("`Await"),
     _dn_=[0,-633954146,17718],
     _dm_=[0,-633954146,14596],
     _dd_=[0,caml_string_of_jsbytes("src/jsonm.ml"),212,8],
     _dc_=[0,caml_string_of_jsbytes("src/jsonm.ml"),205,45],
     _c$_=[0,[11,caml_string_of_jsbytes("`S"),0],caml_string_of_jsbytes("`S")],
     _da_=[0,[11,caml_string_of_jsbytes("`M"),0],caml_string_of_jsbytes("`M")],
     _c6_=
      [0,
       [11,caml_string_of_jsbytes("`Await"),0],
       caml_string_of_jsbytes("`Await")],
     _c7_=
      [0,[11,caml_string_of_jsbytes("`End"),0],caml_string_of_jsbytes("`End")],
     _c8_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,
         caml_string_of_jsbytes("`Error "),
         [18,
          [1,[0,0,caml_string_of_jsbytes("")]],
          [12,40,[15,[12,41,[17,0,[17,0,0]]]]]]]],
       caml_string_of_jsbytes("@[`Error @[(%a)@]@]")],
     _c9_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,
         caml_string_of_jsbytes("`White "),
         [18,[1,[0,0,caml_string_of_jsbytes("")]],[3,0,[17,0,[17,0,0]]]]]],
       caml_string_of_jsbytes("@[`White @[%S@]@]")],
     _c__=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,
         caml_string_of_jsbytes("`Lexeme "),
         [18,
          [1,[0,0,caml_string_of_jsbytes("")]],
          [12,40,[15,[12,41,[17,0,[17,0,0]]]]]]]],
       caml_string_of_jsbytes("@[`Lexeme @[(%a)@]@]")],
     _db_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,
         caml_string_of_jsbytes("`Comment "),
         [18,
          [1,[0,0,caml_string_of_jsbytes("")]],
          [12,
           40,
           [15,
            [11,caml_string_of_jsbytes(", "),[3,0,[12,41,[17,0,[17,0,0]]]]]]]]]],
       caml_string_of_jsbytes("@[`Comment @[(%a, %S)@]@]")],
     _cC_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,
         caml_string_of_jsbytes("illegal"),
         [17,
          [0,caml_string_of_jsbytes("@ "),1,0],
          [11,
           caml_string_of_jsbytes("initial"),
           [17,
            [0,caml_string_of_jsbytes("@ "),1,0],
            [11,
             caml_string_of_jsbytes("BOM"),
             [17,
              [0,caml_string_of_jsbytes("@ "),1,0],
              [11,
               caml_string_of_jsbytes("in"),
               [17,
                [0,caml_string_of_jsbytes("@ "),1,0],
                [11,caml_string_of_jsbytes("character"),partial]]]]]]]]]],
       caml_string_of_jsbytes
        ("@[illegal@ initial@ BOM@ in@ character@ stream@]")],
     _cD_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,
         caml_string_of_jsbytes("illegal"),
         [17,
          [0,caml_string_of_jsbytes("@ "),1,0],
          [11,
           caml_string_of_jsbytes("escape,"),
           [17,[0,caml_string_of_jsbytes("@ "),1,0],0]]]]],
       caml_string_of_jsbytes("@[illegal@ escape,@ ")],
     _cF_=
      [0,
       [15,
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,
          caml_string_of_jsbytes("not"),
          [17,
           [0,caml_string_of_jsbytes("@ "),1,0],
           [11,
            caml_string_of_jsbytes("an"),
            [17,
             [0,caml_string_of_jsbytes("@ "),1,0],
             [11,
              caml_string_of_jsbytes("escaped"),
              [17,
               [0,caml_string_of_jsbytes("@ "),1,0],
               [11,caml_string_of_jsbytes("character"),[17,0,0]]]]]]]]]],
       caml_string_of_jsbytes("%a@ not@ an@ escaped@ character@]")],
     _cG_=
      [0,
       [15,
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,
          caml_string_of_jsbytes("lone"),
          [17,
           [0,caml_string_of_jsbytes("@ "),1,0],
           [11,
            caml_string_of_jsbytes("low"),
            [17,
             [0,caml_string_of_jsbytes("@ "),1,0],
             [11,caml_string_of_jsbytes("surrogate"),[17,0,0]]]]]]]],
       caml_string_of_jsbytes("%a@ lone@ low@ surrogate@]")],
     _cH_=
      [0,
       [15,
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,
          caml_string_of_jsbytes("lone"),
          [17,
           [0,caml_string_of_jsbytes("@ "),1,0],
           [11,
            caml_string_of_jsbytes("high"),
            [17,
             [0,caml_string_of_jsbytes("@ "),1,0],
             [11,caml_string_of_jsbytes("surrogate"),[17,0,0]]]]]]]],
       caml_string_of_jsbytes("%a@ lone@ high@ surrogate@]")],
     _cI_=
      [0,
       [15,
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,
          caml_string_of_jsbytes("not"),
          [17,
           [0,caml_string_of_jsbytes("@ "),1,0],
           [12,
            97,
            [17,
             [0,caml_string_of_jsbytes("@ "),1,0],
             [11,
              caml_string_of_jsbytes("hex"),
              [17,
               [0,caml_string_of_jsbytes("@ "),1,0],
               [11,caml_string_of_jsbytes("digit"),[17,0,0]]]]]]]]]],
       caml_string_of_jsbytes("%a@ not@ a@ hex@ digit@]")],
     _cE_=
      [0,
       [15,
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,
          caml_string_of_jsbytes("not"),
          [17,
           [0,caml_string_of_jsbytes("@ "),1,0],
           [12,
            97,
            [17,
             [0,caml_string_of_jsbytes("@ "),1,0],
             [11,
              caml_string_of_jsbytes("low"),
              [17,
               [0,caml_string_of_jsbytes("@ "),1,0],
               [11,caml_string_of_jsbytes("surrogate"),[17,0,0]]]]]]]]]],
       caml_string_of_jsbytes("%a@ not@ a@ low@ surrogate@]")],
     _cJ_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,
         caml_string_of_jsbytes("illegal"),
         [17,
          [0,caml_string_of_jsbytes("@ "),1,0],
          [11,
           caml_string_of_jsbytes("bytes"),
           [17,
            [0,caml_string_of_jsbytes("@ "),1,0],
            [11,
             caml_string_of_jsbytes("in"),
             [17,
              [0,caml_string_of_jsbytes("@ "),1,0],
              [11,
               caml_string_of_jsbytes("character"),
               [17,
                [0,caml_string_of_jsbytes("@ "),1,0],
                [11,caml_string_of_jsbytes("stream"),partial$0]]]]]]]]]],
       caml_string_of_jsbytes("@[illegal@ bytes@ in@ character@ stream@ (")],
     _cK_=[0,[4,8,[0,2,2],0,0],caml_string_of_jsbytes("%02X")],
     _cM_=[0,[12,32,[4,8,[0,2,2],0,0]],caml_string_of_jsbytes(" %02X")],
     _cL_=[0,[12,41,[17,0,0]],caml_string_of_jsbytes(")@]")],
     _cN_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,
         caml_string_of_jsbytes("expected"),
         [17,[0,caml_string_of_jsbytes("@ "),1,0],0]]],
       caml_string_of_jsbytes("@[expected@ ")],
     _cO_=
      [0,
       [11,
        caml_string_of_jsbytes("member"),
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,caml_string_of_jsbytes("name"),[17,0,0]]]],
       caml_string_of_jsbytes("member@ name@]")],
     _cP_=
      [0,
       [11,
        caml_string_of_jsbytes("JSON"),
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,caml_string_of_jsbytes("text (JSON value)"),[17,0,0]]]],
       caml_string_of_jsbytes("JSON@ text (JSON value)@]")],
     _cQ_=
      [0,
       [11,
        caml_string_of_jsbytes("name"),
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,
          caml_string_of_jsbytes("separator"),
          [17,
           [0,caml_string_of_jsbytes("@ "),1,0],
           [11,caml_string_of_jsbytes("(':')"),[17,0,0]]]]]],
       caml_string_of_jsbytes("name@ separator@ (':')@]")],
     _cR_=
      [0,
       [11,
        caml_string_of_jsbytes("end"),
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,
          caml_string_of_jsbytes("of"),
          [17,
           [0,caml_string_of_jsbytes("@ "),1,0],
           [11,caml_string_of_jsbytes("input"),[17,0,0]]]]]],
       caml_string_of_jsbytes("end@ of@ input@]")],
     _cS_=
      [0,
       [11,
        caml_string_of_jsbytes("JavaScript"),
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,caml_string_of_jsbytes("comment"),[17,0,0]]]],
       caml_string_of_jsbytes("JavaScript@ comment@]")],
     _cT_=
      [0,
       [11,
        caml_string_of_jsbytes("JSON"),
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,caml_string_of_jsbytes("value"),[17,0,0]]]],
       caml_string_of_jsbytes("JSON@ value@]")],
     _cU_=
      [0,
       [11,
        caml_string_of_jsbytes("member"),
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,
          caml_string_of_jsbytes("name"),
          [17,
           [0,caml_string_of_jsbytes("@ "),1,0],
           [11,
            caml_string_of_jsbytes("or"),
            [17,
             [0,caml_string_of_jsbytes("@ "),1,0],
             [11,
              caml_string_of_jsbytes("object"),
              [17,
               [0,caml_string_of_jsbytes("@ "),1,0],
               [11,caml_string_of_jsbytes("end"),[17,partial$2,partial$1]]]]]]]]]],
       caml_string_of_jsbytes
        ("member@ name@ or@ object@ end@ ('\"'@ or@ '}')@]")],
     _cV_=
      [0,
       [11,
        caml_string_of_jsbytes("value"),
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,
          caml_string_of_jsbytes("separator"),
          [17,
           [0,caml_string_of_jsbytes("@ "),1,0],
           [11,
            caml_string_of_jsbytes("or"),
            [17,
             [0,caml_string_of_jsbytes("@ "),1,0],
             [11,
              caml_string_of_jsbytes("object"),
              [17,
               [0,caml_string_of_jsbytes("@ "),1,0],
               [11,caml_string_of_jsbytes("end"),[17,partial$4,partial$3]]]]]]]]]],
       caml_string_of_jsbytes
        ("value@ separator@ or@ object@ end@ (','@ or@ '}')@]")],
     _cW_=
      [0,
       [11,
        caml_string_of_jsbytes("value"),
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,
          caml_string_of_jsbytes("or"),
          [17,
           [0,caml_string_of_jsbytes("@ "),1,0],
           [11,
            caml_string_of_jsbytes("array"),
            [17,
             [0,caml_string_of_jsbytes("@ "),1,0],
             [11,
              caml_string_of_jsbytes("end"),
              [17,
               [0,caml_string_of_jsbytes("@ "),1,0],
               [11,caml_string_of_jsbytes("(value"),[17,partial$6,partial$5]]]]]]]]]],
       caml_string_of_jsbytes("value@ or@ array@ end@ (value@ or@ ']')@]")],
     _cX_=
      [0,
       [11,
        caml_string_of_jsbytes("value"),
        [17,
         [0,caml_string_of_jsbytes("@ "),1,0],
         [11,
          caml_string_of_jsbytes("separator"),
          [17,
           [0,caml_string_of_jsbytes("@ "),1,0],
           [11,
            caml_string_of_jsbytes("or"),
            [17,
             [0,caml_string_of_jsbytes("@ "),1,0],
             [11,
              caml_string_of_jsbytes("array"),
              [17,
               [0,caml_string_of_jsbytes("@ "),1,0],
               [11,caml_string_of_jsbytes("end"),[17,partial$8,partial$7]]]]]]]]]],
       caml_string_of_jsbytes
        ("value@ separator@ or@ array@ end@ (','@ or@ ']')@]")],
     _cY_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,
         caml_string_of_jsbytes("illegal"),
         [17,
          [0,caml_string_of_jsbytes("@ "),1,0],
          [11,
           caml_string_of_jsbytes("number"),
           [17,
            [0,caml_string_of_jsbytes("@ "),1,0],
            [12,40,[2,0,[12,41,[17,0,0]]]]]]]]],
       caml_string_of_jsbytes("@[illegal@ number@ (%s)@]")],
     _c4_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,
         caml_string_of_jsbytes("illegal"),
         [17,
          [0,caml_string_of_jsbytes("@ "),1,0],
          [11,
           caml_string_of_jsbytes("literal"),
           [17,
            [0,caml_string_of_jsbytes("@ "),1,0],
            [12,40,[2,0,[12,41,[17,0,0]]]]]]]]],
       caml_string_of_jsbytes("@[illegal@ literal@ (%s)@]")],
     _c5_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,
         caml_string_of_jsbytes("illegal"),
         [17,
          [0,caml_string_of_jsbytes("@ "),1,0],
          [11,
           caml_string_of_jsbytes("character"),
           [17,
            [0,caml_string_of_jsbytes("@ "),1,0],
            [11,
             caml_string_of_jsbytes("in"),
             [17,
              [0,caml_string_of_jsbytes("@ "),1,0],
              [11,
               caml_string_of_jsbytes("JSON"),
               [17,
                [0,caml_string_of_jsbytes("@ "),1,0],
                [11,caml_string_of_jsbytes("string"),partial$9]]]]]]]]]],
       caml_string_of_jsbytes
        ("@[illegal@ character@ in@ JSON@ string@ (%a)@]")],
     _cZ_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,
         caml_string_of_jsbytes("unclosed"),
         [17,[0,caml_string_of_jsbytes("@ "),1,0],0]]],
       caml_string_of_jsbytes("@[unclosed@ ")],
     _c0_=
      [0,
       [11,caml_string_of_jsbytes("object"),[17,0,0]],
       caml_string_of_jsbytes("object@]")],
     _c1_=
      [0,
       [11,caml_string_of_jsbytes("array"),[17,0,0]],
       caml_string_of_jsbytes("array@]")],
     _c2_=
      [0,
       [11,caml_string_of_jsbytes("comment"),[17,0,0]],
       caml_string_of_jsbytes("comment@]")],
     _c3_=
      [0,
       [11,caml_string_of_jsbytes("string"),[17,0,0]],
       caml_string_of_jsbytes("string@]")],
     _cB_=
      [0,
       [12,39,[2,0,[11,caml_string_of_jsbytes("' ("),[15,[12,41,0]]]]],
       caml_string_of_jsbytes("'%s' (%a)")],
     _cA_=
      [0,
       [11,caml_string_of_jsbytes("U+"),[4,8,[0,2,4],0,0]],
       caml_string_of_jsbytes("U+%04X")],
     _cs_=
      [0,
       [11,caml_string_of_jsbytes("`Null"),0],
       caml_string_of_jsbytes("`Null")],
     _ct_=
      [0,[11,caml_string_of_jsbytes("`Os"),0],caml_string_of_jsbytes("`Os")],
     _cu_=
      [0,[11,caml_string_of_jsbytes("`Oe"),0],caml_string_of_jsbytes("`Oe")],
     _cv_=
      [0,[11,caml_string_of_jsbytes("`Ae"),0],caml_string_of_jsbytes("`Ae")],
     _cr_=
      [0,[11,caml_string_of_jsbytes("`As"),0],caml_string_of_jsbytes("`As")],
     _cw_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,caml_string_of_jsbytes("`Name "),[3,0,[17,0,0]]]],
       caml_string_of_jsbytes("@[`Name %S@]")],
     _cx_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,caml_string_of_jsbytes("`Bool "),[9,0,[17,0,0]]]],
       caml_string_of_jsbytes("@[`Bool %b@]")],
     _cy_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,caml_string_of_jsbytes("`Float "),[2,0,[17,0,0]]]],
       caml_string_of_jsbytes("@[`Float %s@]")],
     _cz_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,caml_string_of_jsbytes("`String "),[3,0,[17,0,0]]]],
       caml_string_of_jsbytes("@[`String %S@]")],
     _dL_=
      [0,
       [17,[0,caml_string_of_jsbytes("@;"),1,0],0],
       caml_string_of_jsbytes("@;")],
     _dK_=[0,[12,32,0],caml_string_of_jsbytes(" ")],
     _dJ_=[0,[11,caml_string_of_jsbytes("  "),0],caml_string_of_jsbytes("  ")],
     _dM_=[0,[15,[4,6,0,[0,2],[15,0]]],caml_string_of_jsbytes("%a%.2x%a")],
     _dI_=[0,[12,91,[4,0,0,0,[12,93,0]]],caml_string_of_jsbytes("[%d]")],
     _dH_=
      [0,
       [12,
        91,
        [4,
         0,
         0,
         0,
         [12,
          44,
          [4,0,0,0,[11,caml_string_of_jsbytes("]("),[4,0,0,0,[12,41,0]]]]]]],
       caml_string_of_jsbytes("[%d,%d](%d)")],
     _dS_=caml_string_of_jsbytes("not a valid JSON array/object"),
     _dP_=[0,caml_string_of_jsbytes("lib/ezjsonm.ml"),56,11],
     _dQ_=[0,caml_string_of_jsbytes("lib/ezjsonm.ml"),63,17],
     _dO_=[0,caml_string_of_jsbytes("lib/ezjsonm.ml"),47,19],
     _dN_=caml_string_of_jsbytes("Ezjsonm.Escape"),
     _dR_=caml_string_of_jsbytes("Ezjsonm.Parse_error"),
     _dU_=caml_string_of_jsbytes("jsError"),
     _dT_=caml_string_of_jsbytes("Jv.Error"),
     _dX_=caml_string_of_jsbytes("error"),
     _dW_=caml_string_of_jsbytes("log"),
     _dY_=caml_string_of_jsbytes("cache"),
     _dZ_=caml_string_of_jsbytes("credentials"),
     _d0_=caml_string_of_jsbytes("integrity"),
     _d1_=caml_string_of_jsbytes("method"),
     _d2_=caml_string_of_jsbytes("mode"),
     _d3_=caml_string_of_jsbytes("redirect"),
     _d4_=caml_string_of_jsbytes("referrer"),
     _d5_=caml_string_of_jsbytes("referrerPolicy"),
     _d9_=caml_string_of_jsbytes("id"),
     _d__=caml_string_of_jsbytes("name"),
     _d$_=caml_string_of_jsbytes("version"),
     _d8_=
      [0,
       caml_string_of_jsbytes("data"),
       [0,caml_string_of_jsbytes("packages"),0]],
     _d7_=caml_string_of_jsbytes("Package Error"),
     _d6_=[0,caml_string_of_jsbytes("client/main.ml"),11,17],
     _ea_=caml_string_of_jsbytes("query");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    var ux_eoi=2147483647,min_int=-2147483648;
    function symbol(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function string_of_bool(b){return b?_a_:_b_}
    function string_of_float(f)
     {var s=caml_format_float(_d_,f),l=caml_ml_string_length(s),i=0;
      for(;;)
       {if(l <= i)return symbol(s,_c_);
        var match=caml_string_get(s,i),switch$0=0;
        if(48 <= match)
         {if(! (58 <= match))switch$0 = 1}
        else
         if(45 === match)switch$0 = 1;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    caml_ml_open_descriptor_in(0);
    var
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_lh_)
             {_lh_ = caml_wrap_exception(_lh_);
              if(_lh_[1] !== Sys_error)throw _lh_;
              var _lg_=_lh_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    var exit_function=[0,flush_all];
    function of_int(i)
     {var _lc_=0 <= i?1:0,_ld_=_lc_?i <= 55295?1:0:_lc_;
      if(_ld_)
       var _le_=_ld_;
      else
       var _lf_=57344 <= i?1:0,_le_=_lf_?i <= 1114111?1:0:_lf_;
      return _le_?i:invalid_arg(symbol(caml_format_int(_o_,i),_n_))}
    var
     match=caml_sys_const_backend_type(0),
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    function hd(param){if(param){var a=param[1];return a}return failwith(_p_)}
    function rev(l)
     {var l1=l,l2=0;
      for(;;)
       {if(l1){var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;continue}
        return l2}}
    typeof match === "number";
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=l;
          continue}
        return 0}}
    function fold_left(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    var empty=caml_create_bytes(0);
    function sub(s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       {var r=caml_create_bytes(len);caml_blit_bytes(s,ofs,r,0,len);return r}
      return invalid_arg(_r_)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_s_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_t_)}
    function make$0(n,c){return caml_string_of_bytes(make(n,c))}
    function sub$0(s,ofs,len)
     {return caml_string_of_bytes(sub(caml_bytes_of_string(s),ofs,len))}
    caml_fresh_oo_id(0);
    caml_fresh_oo_id(0);
    function create(param){return [0,0,0]}
    function clear(s){s[1] = 0;s[2] = 0;return 0}
    function push(x,s){s[1] = [0,x,s[1]];s[2] = s[2] + 1 | 0;return 0}
    function pop_opt(s)
     {var _lb_=s[1];
      if(_lb_)
       {var tl=_lb_[2],hd=_lb_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return [0,hd]}
      return 0}
    function top_opt(s)
     {var _la_=s[1];if(_la_){var hd=_la_[1];return [0,hd]}return 0}
    var Empty=[248,_u_,caml_fresh_oo_id(0)];
    function clear$0(q){q[1] = 0;q[2] = 0;q[3] = 0;return 0}
    function add(x,q)
     {var cell=[0,x,0],_k$_=q[3];
      return _k$_
              ?(q[1] = q[1] + 1 | 0,_k$_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    function create$0(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function contents(b){return sub_string(b[1],0,b[2])}
    function blit$1(src,srcoff,dst,dstoff,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        srcoff
        &&
        !
        ((src[2] - len | 0) < srcoff)
        &&
        0
        <=
        dstoff
        &&
        !
        ((caml_ml_bytes_length(dst) - len | 0) < dstoff))
       return caml_blit_bytes(src[1],srcoff,dst,dstoff,len);
      return invalid_arg(_w_)}
    function clear$1(b){b[2] = 0;return 0}
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_z_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_x_]}
        throw [0,Assert_failure,_y_]}}
    function add_char(b,c)
     {var pos=b[2];
      if(b[3] <= pos)resize(b,1);
      caml_bytes_unsafe_set(b[1],pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    function add_substring(b,s,offset,len)
     {var _k8_=offset < 0?1:0;
      if(_k8_)
       var _k9_=_k8_;
      else
       var
        _k__=len < 0?1:0,
        _k9_=_k__ || ((caml_ml_string_length(s) - len | 0) < offset?1:0);
      if(_k9_)invalid_arg(_A_);
      var new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,offset,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       y=buf[1] + overhead | 0,
       _k6_=len < y?1:0;
      if(_k6_)
       {var
         x=len * 2 | 0,
         new_len=caml_greaterequal(x,y)?x:y,
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _k7_=0}
      else
       var _k7_=_k6_;
      return _k7_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _B_;
         case 1:return _C_;
         case 2:return _D_;
         case 3:return _E_;
         case 4:return _F_;
         case 5:return _G_;
         default:return _H_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return symbol(_I_,make$0(1,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,_J_);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,_K_);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,_L_);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,_M_);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,_N_);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,_O_);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,_P_);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,_Q_);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_R_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_S_);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_T_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_U_);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,_V_);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,_W_);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,_X_);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,_Y_);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,_Z_);
           var fmtty$0=rest$13;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function trans(ty1,match)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,___]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_kN_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_kN_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_kO_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_kO_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_kP_=ty1[1];
          if(typeof match === "number")
           switch$3 = 1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_kP_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_kQ_=ty1[1];
          if(typeof match === "number")
           switch$4 = 1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_kQ_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_kR_=ty1[1];
          if(typeof match === "number")
           switch$5 = 1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_kR_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_kS_=ty1[1];
          if(typeof match === "number")
           switch$6 = 1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_kS_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_kT_=ty1[1];
          if(typeof match === "number")
           switch$7 = 1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_kT_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_kU_=ty1[1];
          if(typeof match === "number")
           switch$8 = 1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_kU_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_kV_=ty1[2],_kW_=ty1[1];
          if(typeof match === "number")
           switch$9 = 1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_kX_=trans(_kV_,rest2$7);
              return [8,trans(_kW_,ty2),_kX_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_ah_];
          break;
         case 9:
          var switch$10=0,_kY_=ty1[3],_kZ_=ty1[2],_k0_=ty1[1];
          if(typeof match === "number")
           switch$10 = 1;
          else
           switch(match[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_kZ_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_k0_,ty22,trans(_kY_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_ai_];
          break;
         case 10:
          var _k1_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_k1_,rest2$9)]}
          throw [0,Assert_failure,_aj_];
         case 11:
          var switch$11=0,_k2_=ty1[1];
          if(typeof match === "number")
           switch$11 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:var rest2$10=match[1];return [11,trans(_k2_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_ak_];
          break;
         case 12:
          var switch$12=0,_k3_=ty1[1];
          if(typeof match === "number")
           switch$12 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=match[1];return [12,trans(_k3_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_al_];
          break;
         case 13:
          var switch$13=0,_k4_=ty1[1];
          if(typeof match === "number")
           switch$13 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=match[1];return [13,trans(_k4_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_am_];
          break;
         default:
          var switch$14=0,_k5_=ty1[1];
          if(typeof match === "number")
           switch$14 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=match[1];return [14,trans(_k5_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_an_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ab_];
        case 1:throw [0,Assert_failure,_ac_];
        case 2:throw [0,Assert_failure,_ad_];
        case 3:throw [0,Assert_failure,_ae_];
        case 4:throw [0,Assert_failure,_af_];
        case 5:throw [0,Assert_failure,_$_];
        case 6:throw [0,Assert_failure,_aa_];
        default:throw [0,Assert_failure,_ag_]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _kp_=function(param){return 0},
         _kq_=function(param){return 0},
         _kr_=function(param){return 0};
        return [0,function(param){return 0},_kr_,_kq_,_kp_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _ks_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_ks_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _kt_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _kt_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _ku_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _ku_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _kv_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _kv_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _kw_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _kw_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _kx_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _kx_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _ky_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _ky_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _kz_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _kz_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _kA_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _kA_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _kB_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _kC_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _kD_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _kD_,
                  _kC_,
                  _kB_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _kE_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _kE_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _kF_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _kF_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _kG_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _kG_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _kH_=function(param){caml_call1(de$12,0);return 0},
           _kI_=function(param){caml_call1(ed$12,0);return 0},
           _kJ_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _kJ_,
                  _kI_,
                  _kH_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _kK_=function(param){caml_call1(de$13,0);return 0},
           _kL_=function(param){caml_call1(ed$13,0);return 0},
           _kM_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _kM_,
                  _kL_,
                  _kK_]}}
    var Type_mismatch=[248,_ao_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(prec)
         {var _ko_=match[2];
          if(typeof _ko_ !== "number" && 2 === _ko_[0])
           {var rest=_ko_[1],pad$0=match[1];return [0,pad$0,1,rest]}
          throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_format_substituti(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _km_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_km_))
             throw Type_mismatch;
            var _kn_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_kn_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           match$1=type_padding(pad,fmtty),
           _j7_=match$1[2],
           _j6_=match$1[1];
          if(typeof _j7_ !== "number" && 1 === _j7_[0])
           {var
             fmtty_rest$1=_j7_[1],
             match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$2[2],
             fmt$2=match$2[1];
            return [0,[2,_j6_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           match$3=type_padding(pad$0,fmtty),
           _j9_=match$3[2],
           _j8_=match$3[1];
          if(typeof _j9_ !== "number" && 1 === _j9_[0])
           {var
             fmtty_rest$2=_j9_[1],
             match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$4[2],
             fmt$3=match$4[1];
            return [0,[3,_j8_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           match$5=type_padprec(pad$1,prec,fmtty),
           _j$_=match$5[3],
           _j__=match$5[1];
          if(typeof _j$_ !== "number" && 2 === _j$_[0])
           {var
             fmtty_rest$3=_j$_[1],
             prec$0=match$5[2],
             match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$6[2],
             fmt$4=match$6[1];
            return [0,[4,iconv,_j__,prec$0,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           match$7=type_padprec(pad$2,prec$1,fmtty),
           _kb_=match$7[3],
           _ka_=match$7[1];
          if(typeof _kb_ !== "number" && 3 === _kb_[0])
           {var
             fmtty_rest$4=_kb_[1],
             prec$2=match$7[2],
             match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$8[2],
             fmt$5=match$8[1];
            return [0,[5,iconv$0,_ka_,prec$2,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           match$9=type_padprec(pad$3,prec$3,fmtty),
           _kd_=match$9[3],
           _kc_=match$9[1];
          if(typeof _kd_ !== "number" && 4 === _kd_[0])
           {var
             fmtty_rest$5=_kd_[1],
             prec$4=match$9[2],
             match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$10[2],
             fmt$6=match$10[1];
            return [0,[6,iconv$1,_kc_,prec$4,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           match$11=type_padprec(pad$4,prec$5,fmtty),
           _kf_=match$11[3],
           _ke_=match$11[1];
          if(typeof _kf_ !== "number" && 5 === _kf_[0])
           {var
             fmtty_rest$6=_kf_[1],
             prec$6=match$11[2],
             match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$12[2],
             fmt$7=match$12[1];
            return [0,[7,iconv$2,_ke_,prec$6,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           match$13=type_padprec(pad$5,prec$7,fmtty),
           _kh_=match$13[3],
           _kg_=match$13[1];
          if(typeof _kh_ !== "number" && 6 === _kh_[0])
           {var
             fmtty_rest$7=_kh_[1],
             prec$8=match$13[2],
             match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$14[2],
             fmt$8=match$14[1];
            return [0,[8,fconv,_kg_,prec$8,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           match$15=type_padding(pad$6,fmtty),
           _kj_=match$15[2],
           _ki_=match$15[1];
          if(typeof _kj_ !== "number" && 7 === _kj_[0])
           {var
             fmtty_rest$8=_kj_[1],
             match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$16[2],
             fmt$9=match$16[1];
            return [0,[9,_ki_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$17=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$17[2],
           fmt$10=match$17[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$18=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$18[2],
           fmt$11=match$18[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$19=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$19[2],
           fmt$12=match$19[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$20[2],
             fmt$13=match$20[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _kk_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_kk_))
             throw Type_mismatch;
            var
             match$21=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$21[2],
             fmt$14=match$21[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$22[2],
             fmt$15=match$22[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$23[2],
             fmt$16=match$23[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$24=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$24[2],
           fmt$17=match$24[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$28=formatting_gen[1],
             str$0=match$28[2],
             fmt1=match$28[1],
             match$29=type_format_gen(fmt1,fmtty),
             fmtty2=match$29[2],
             fmt2=match$29[1],
             match$30=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$30[2],
             fmt3=match$30[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$31=formatting_gen[1],
           str$1=match$31[2],
           fmt1$0=match$31[1],
           match$32=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$32[2],
           fmt2$0=match$32[1],
           match$33=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$33[2],
           fmt3$0=match$33[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$25[2],
             fmt$18=match$25[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$26[2],
             fmt$19=match$26[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$27[2],
             fmt$20=match$27[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$34=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$34[2],
                 fmt$21=match$34[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _kl_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
               match$35=_kl_[2],
               fmtty$22=match$35[2],
               fmt$22=match$35[1],
               sub_fmtty$4=_kl_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _j5_=2 === padty$0?48:32,res=make(width$0,_j5_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < (c - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0) && 1 < len)
               {var switch$2=0;
                if
                 (120
                  ===
                  caml_string_get(str,1)
                  ||
                  88
                  ===
                  caml_string_get(str,1))
                 switch$2 = 1;
                if(switch$2)
                 {var res$1=make(prec$0 + 2 | 0,48);
                  caml_bytes_set(res$1,1,caml_string_get(str,1));
                  blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                  return caml_string_of_bytes(res$1)}}
              switch$0 = 1;
              switch$1 = 1;
              break;
             case 0:
             case 2:break;
             case 1:
             case 3:
             case 4:switch$1 = 1;break;
             default:switch$0 = 1;switch$1 = 1}}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var n$0=caml_ml_string_length(str),i$1=0;
      for(;;)
       {if(n$0 <= i$1)
         var str$0=str;
        else
         {var
           match$0=caml_string_unsafe_get(str,i$1),
           _j3_=match$0 - 32 | 0,
           switch$0=0;
          if(59 < _j3_ >>> 0)
           {if(33 < (_j3_ - 61 | 0) >>> 0)switch$0 = 1}
          else
           if(2 === _j3_)switch$0 = 1;
          if(! switch$0){var i$2=i$1 + 1 | 0,i$1=i$2;continue}
          var
           s$0=caml_bytes_of_string(str),
           n=[0,0],
           _jW_=caml_ml_bytes_length(s$0) - 1 | 0,
           _jV_=0;
          if(! (_jW_ < 0))
           {var i$0=_jV_;
            for(;;)
             {var match=caml_bytes_unsafe_get(s$0,i$0),switch$1=0;
              if(32 <= match)
               {var _j0_=match - 34 | 0,switch$2=0;
                if(58 < _j0_ >>> 0)
                 {if(93 <= _j0_)switch$2 = 1}
                else
                 if(56 < (_j0_ - 1 | 0) >>> 0){switch$1 = 1;switch$2 = 1}
                if(! switch$2){var _j1_=1;switch$1 = 2}}
              else
               if(11 <= match)
                {if(13 === match)switch$1 = 1}
               else
                if(8 <= match)switch$1 = 1;
              switch(switch$1)
               {case 0:var _j1_=4;break;case 1:var _j1_=2;break}
              n[1] = n[1] + _j1_ | 0;
              var _j2_=i$0 + 1 | 0;
              if(_jW_ !== i$0){var i$0=_j2_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(s$0))
           {var len=caml_ml_bytes_length(s$0),r=caml_create_bytes(len);
            caml_blit_bytes(s$0,0,r,0,len);
            var _j4_=r}
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _jY_=caml_ml_bytes_length(s$0) - 1 | 0,_jX_=0;
            if(! (_jY_ < 0))
             {var i=_jX_;
              for(;;)
               {var c=caml_bytes_unsafe_get(s$0,i),switch$3=0;
                if(35 <= c)
                 if(92 === c)
                  switch$3 = 2;
                 else
                  if(127 <= c)switch$3 = 1;else switch$3 = 3;
                else
                 if(32 <= c)
                  if(34 <= c)switch$3 = 2;else switch$3 = 3;
                 else
                  if(14 <= c)
                   switch$3 = 1;
                  else
                   switch(c)
                    {case 8:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],98);
                      break;
                     case 9:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],116);
                      break;
                     case 10:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],110);
                      break;
                     case 13:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],114);
                      break;
                     default:switch$3 = 1}
                switch(switch$3)
                 {case 1:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 2:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],c);
                   break;
                  case 3:caml_bytes_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _jZ_=i + 1 | 0;
                if(_jY_ !== i){var i=_jZ_;continue}
                break}}
            var _j4_=s}
          var str$0=caml_string_of_bytes(_j4_)}
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return caml_string_of_bytes(res)}}
    function format_of_fconv(fconv,prec)
     {var prec$0=abs(prec);
      if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:var symb=102;break;
        case 1:var symb=101;break;
        case 2:var symb=69;break;
        case 3:var symb=103;break;
        case 4:var symb=71;break;
        case 5:var symb=cF;break;
        case 6:var symb=104;break;
        case 7:var symb=72;break;
        default:var symb=70}
      var buf=buffer_create(16);
      buffer_add_char(buf,37);
      switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      if(8 <= fconv[2])buffer_add_char(buf,35);
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_string_of_jsbytes("" + prec$0));
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_jQ_=caml_ml_string_length(s) - 1 | 0,_jP_=0;
        if(! (_jQ_ < 0))
         {var i$0=_jP_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switcher$0=match - 48 | 0;
            if(! (9 < switcher$0 >>> 0))n[1]++;
            var _jU_=i$0 + 1 | 0;
            if(_jQ_ !== i$0){var i$0=_jU_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _jS_=caml_ml_string_length(s) - 1 | 0,
         _jR_=0;
        if(! (_jS_ < 0))
         {var i=_jR_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switcher=c - 48 | 0;
            if(9 < switcher >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _jT_=i + 1 | 0;
            if(_jS_ !== i){var i=_jT_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _jO_=_aq_;break;
        case 2:var _jO_=_ar_;break;
        case 4:var _jO_=_at_;break;
        case 5:var _jO_=_au_;break;
        case 6:var _jO_=_av_;break;
        case 7:var _jO_=_aw_;break;
        case 8:var _jO_=_ax_;break;
        case 9:var _jO_=_ay_;break;
        case 10:var _jO_=_az_;break;
        case 11:var _jO_=_aA_;break;
        case 0:
        case 13:var _jO_=_ap_;break;
        case 3:
        case 14:var _jO_=_as_;break;
        default:var _jO_=_aB_}
      return transform_int_alt(iconv,caml_format_int(_jO_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _jN_=_aQ_;break;
        case 2:var _jN_=_aR_;break;
        case 4:var _jN_=_aT_;break;
        case 5:var _jN_=_aU_;break;
        case 6:var _jN_=_aV_;break;
        case 7:var _jN_=_aW_;break;
        case 8:var _jN_=_aX_;break;
        case 9:var _jN_=_aY_;break;
        case 10:var _jN_=_aZ_;break;
        case 11:var _jN_=_a0_;break;
        case 0:
        case 13:var _jN_=_aP_;break;
        case 3:
        case 14:var _jN_=_aS_;break;
        default:var _jN_=_a1_}
      return transform_int_alt(iconv,caml_format_int(_jN_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _jM_=_a3_;break;
        case 2:var _jM_=_a4_;break;
        case 4:var _jM_=_a6_;break;
        case 5:var _jM_=_a7_;break;
        case 6:var _jM_=_a8_;break;
        case 7:var _jM_=_a9_;break;
        case 8:var _jM_=_a__;break;
        case 9:var _jM_=_a$_;break;
        case 10:var _jM_=_ba_;break;
        case 11:var _jM_=_bb_;break;
        case 0:
        case 13:var _jM_=_a2_;break;
        case 3:
        case 14:var _jM_=_a5_;break;
        default:var _jM_=_bc_}
      return transform_int_alt(iconv,caml_format_int(_jM_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _jL_=_aD_;break;
        case 2:var _jL_=_aE_;break;
        case 4:var _jL_=_aG_;break;
        case 5:var _jL_=_aH_;break;
        case 6:var _jL_=_aI_;break;
        case 7:var _jL_=_aJ_;break;
        case 8:var _jL_=_aK_;break;
        case 9:var _jL_=_aL_;break;
        case 10:var _jL_=_aM_;break;
        case 11:var _jL_=_aN_;break;
        case 0:
        case 13:var _jL_=_aC_;break;
        case 3:
        case 14:var _jL_=_aF_;break;
        default:var _jL_=_aO_}
      return transform_int_alt(iconv,caml_int64_format(_jL_,n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return caml_hexstring_of_float(x,prec,sign)}
      function caml_special_val(str)
       {var match=caml_classify_float(x);
        return 3 === match?x < 0.?_be_:_bf_:4 <= match?_bg_:str}
      switch(fconv[2])
       {case 5:
         var
          str=caml_format_float(format_of_fconv(fconv,prec),x),
          len=caml_ml_string_length(str),
          i$0=0;
         for(;;)
          {if(i$0 === len)
            var _jJ_=0;
           else
            {var
              match=caml_string_get(str,i$0),
              _jI_=match - 46 | 0,
              switch$0=0;
             if(23 < _jI_ >>> 0)
              {if(55 === _jI_)switch$0 = 1}
             else
              if(21 < (_jI_ - 1 | 0) >>> 0)switch$0 = 1;
             if(! switch$0){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
             var _jJ_=1}
           var _jK_=_jJ_?str:symbol(str,_bd_);
           return caml_special_val(_jK_)}
        case 6:return hex(0);
        case 7:
         var s$0=hex(0),s=caml_bytes_of_string(s$0),l=caml_ml_bytes_length(s);
         if(0 === l)
          var _jH_=s;
         else
          {var r=caml_create_bytes(l),_jE_=l - 1 | 0,_jD_=0;
           if(! (_jE_ < 0))
            {var i=_jD_;
             for(;;)
              {var
                c=caml_bytes_unsafe_get(s,i),
                switcher=c - 97 | 0,
                _jF_=25 < switcher >>> 0?c:c - 32 | 0;
               caml_bytes_unsafe_set(r,i,_jF_);
               var _jG_=i + 1 | 0;
               if(_jE_ !== i){var i=_jG_;continue}
               break}}
           var _jH_=r}
         return caml_string_of_bytes(_jH_);
        case 8:return caml_special_val(hex(0));
        default:return caml_format_float(format_of_fconv(fconv,prec),x)}}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var switch$0=0;
             if(40 <= c)
              if(92 === c)
               var str=_h_;
              else
               if(127 <= c)switch$0 = 1;else switch$0 = 2;
             else
              if(32 <= c)
               if(39 <= c)var str=_i_;else switch$0 = 2;
              else
               if(14 <= c)
                switch$0 = 1;
               else
                switch(c)
                 {case 8:var str=_j_;break;
                  case 9:var str=_k_;break;
                  case 10:var str=_l_;break;
                  case 13:var str=_m_;break;
                  default:switch$0 = 1}
             switch(switch$0)
              {case 1:
                var s=caml_create_bytes(4);
                caml_bytes_unsafe_set(s,0,92);
                caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=caml_string_of_bytes(s);
                break;
               case 2:
                var s$0=caml_create_bytes(1);
                caml_bytes_unsafe_set(s$0,0,c);
                var str=caml_string_of_bytes(s$0);
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return prec$3
                      ?function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _jz_=pad$5[2],_jA_=pad$5[1];
               if(typeof prec$3 === "number")
                return prec$3
                        ?function(p,x)
                          {var str=fix_padding(_jA_,_jz_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)}
                        :function(x)
                          {var
                            str=convert_float(fconv,default_float_precision(fconv),x),
                            str$0=fix_padding(_jA_,_jz_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_jA_,_jz_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _jB_=pad$5[1];
             if(typeof prec$3 === "number")
              return prec$3
                      ?function(w,p,x)
                        {var str=fix_padding(_jB_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_jB_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_jB_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _jC_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _jC_[2] === "number")
              {var fmt=_jC_[1];
               return make_printf(k$0,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _jx_=fmt$0[1];
           if(0 === _jx_[0])
            {var
              rest$13=fmt$0[2],
              match=_jx_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_jx_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bh_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bi_];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bj_,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:throw [0,Assert_failure,_bk_];
              default:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 8:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,acc$0,fmtty$0,rest$18]);
              case 10:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _jy_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_jy_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_jy_])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_jw_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bl_];
         default:throw [0,Assert_failure,_bm_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _jv_=[8,acc,_bn_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_jv_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_jv_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _ju_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_ju_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_ju_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_int_padding_precision(k,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return match
                 ?function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _jr_=pad[2],_js_=pad[1];
          if(typeof match === "number")
           return match
                   ?function(p,x)
                     {var
                       str=
                        fix_padding
                         (_js_,_jr_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var str=fix_padding(_js_,_jr_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_js_,_jr_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _jt_=pad[1];
        if(typeof match === "number")
         return match
                 ?function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_jt_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var str=fix_padding(_jt_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_jt_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function bufput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           bufput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _jp_=acc$0[2],_jq_=acc$0[1];
           if(0 === _jp_[0])
            {var acc$1=_jp_[1];
             bufput_acc(b,_jq_);
             add_string(b,_bo_);
             var acc$0=acc$1;
             continue}
           var acc$2=_jp_[1];
           bufput_acc(b,_jq_);
           add_string(b,_bp_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           bufput_acc(b,p$2);
           return caml_call1(f,b);
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           bufput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           bufput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];bufput_acc(b,p$1);return add_char(b,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _jn_=acc$0[2],_jo_=acc$0[1];
           if(0 === _jn_[0])
            {var acc$1=_jn_[1];
             strput_acc(b,_jo_);
             add_string(b,_bq_);
             var acc$0=acc$1;
             continue}
           var acc$2=_jn_[1];
           strput_acc(b,_jo_);
           add_string(b,_br_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}
    function open_box_of_string(str)
     {if(caml_string_equal(str,_bs_))return _bt_;
      var len=caml_ml_string_length(str);
      function invalid_box(param$0)
       {var fmt=param[1],buf=create$0(256);
        function k(acc){strput_acc(buf,acc);return failwith(contents(buf))}
        return caml_call1(make_printf(k,0,fmt),str)}
      function parse_spaces(i)
       {var i$0=i;
        for(;;)
         {if(i$0 === len)return i$0;
          var match=caml_string_get(str,i$0);
          if(9 !== match && 32 !== match)return i$0;
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function parse_lword(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switcher=match - 97 | 0;
          if(25 < switcher >>> 0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1;
          continue}}
      function parse_int(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switch$0=0;
          if(48 <= match)
           {if(! (58 <= match))switch$0 = 1}
          else
           if(45 === match)switch$0 = 1;
          if(switch$0){var j$1=j$0 + 1 | 0,j$0=j$1;continue}
          return j$0}}
      var
       wstart=parse_spaces(0),
       wend=parse_lword(wstart,wstart),
       box_name=sub$0(str,wstart,wend - wstart | 0),
       nstart=parse_spaces(wend),
       nend=parse_int(nstart,nstart);
      if(nstart === nend)
       var indent=0;
      else
       try
        {var
          _jl_=caml_int_of_string(sub$0(str,nstart,nend - nstart | 0)),
          indent=_jl_}
       catch(_jm_)
        {_jm_ = caml_wrap_exception(_jm_);
         if(_jm_[1] !== Failure)throw _jm_;
         var indent=invalid_box(0)}
      var exp_end=parse_spaces(nend);
      if(exp_end !== len)invalid_box(0);
      var switch$0=0;
      if
       (caml_string_notequal(box_name,_bu_)
        &&
        caml_string_notequal(box_name,_bv_))
       var
        box_type=
         caml_string_notequal(box_name,_bw_)
          ?caml_string_notequal(box_name,_bx_)
            ?caml_string_notequal(box_name,_by_)
              ?caml_string_notequal(box_name,_bz_)?invalid_box(0):1
              :2
            :3
          :0;
      else
       switch$0 = 1;
      if(switch$0)var box_type=4;
      return [0,indent,box_type]}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(acc)
       {var buf=create$0(64);
        strput_acc(buf,acc);
        return caml_call1(k,contents(buf))}
      return make_printf(k$0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var printers=[0,0];
    function field(x,i)
     {var a=x[1 + i];
      return 1 - (typeof a === "number"?1:0)
              ?caml_obj_tag(a) === 252
                ?caml_call1(sprintf(_bA_),a)
                :caml_obj_tag(a) === 253?string_of_float(a):_bB_
              :caml_call1(sprintf(_bC_),a)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _bD_;
      var _jj_=other_fields(x,i + 1 | 0),_jk_=field(x,i);
      return caml_call2(sprintf(_bE_),_jk_,_jj_)}
    function to_string(e)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try
             {var switch$0=0,val=caml_call1(hd,e);switch$0 = 1}
            catch(_ji_){}
            if(switch$0 && val){var s=val[1];return [0,s]}
            var param$0=tl;
            continue}
          return 0}}
      var match$0=conv(printers[1]);
      if(match$0){var s=match$0[1];return s}
      if(e === Out_of_memory)return _bJ_;
      if(e === Stack_overflow)return _bK_;
      if(e[1] === Match_failure)
       {var match$1=e[2],char$0=match$1[3],line=match$1[2],file=match$1[1];
        return caml_call5
                (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_bL_)}
      if(e[1] === Assert_failure)
       {var
         match$2=e[2],
         char$1=match$2[3],
         line$0=match$2[2],
         file$0=match$2[1];
        return caml_call5
                (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_bM_)}
      if(e[1] === Undefined_recursive_module)
       {var
         match$3=e[2],
         char$2=match$3[3],
         line$1=match$3[2],
         file$1=match$3[1];
        return caml_call5
                (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_bN_)}
      if(0 === caml_obj_tag(e))
       {var constructor=e[1][1],match=e.length - 1;
        if(2 < match >>> 0)
         var
          _je_=other_fields(e,2),
          _jf_=field(e,1),
          _jh_=caml_call2(sprintf(_bF_),_jf_,_je_);
        else
         switch(match)
          {case 0:var _jh_=_bG_;break;
           case 1:var _jh_=_bH_;break;
           default:var _jg_=field(e,1),_jh_=caml_call1(sprintf(_bI_),_jg_)}
        return symbol(constructor,_jh_)}
      return e[1]}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    var Finally_raised=[248,_bO_,caml_fresh_oo_id(0)];
    register_printer
     (function(param)
       {if(param[1] === Finally_raised)
         {var exn=param[2];return [0,symbol(_bP_,to_string(exn))]}
        return 0});
    var String_tag=[248,_bQ_,caml_fresh_oo_id(0)],size=0,unknown=-1;
    function pp_enqueue(state,token)
     {state[13] = state[13] + token[3] | 0;return add(token,state[28])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function format_pp_text(state,size,text)
     {state[9] = state[9] - size | 0;
      pp_output_string(state,text);
      state[11] = 0;
      return 0}
    function format_string(state,s)
     {var _jd_=caml_string_notequal(s,_bR_);
      return _jd_?format_pp_text(state,caml_ml_string_length(s),s):_jd_}
    function break_new_line(state,param,width)
     {var after=param[3],offset=param[2],before=param[1];
      format_string(state,before);
      pp_output_newline(state);
      state[11] = 1;
      var
       indent=(state[6] - width | 0) + offset | 0,
       real_indent=min(state[8],indent);
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      caml_call1(state[21],state[10]);
      return format_string(state,after)}
    function break_line(state,width){return break_new_line(state,_bS_,width)}
    function break_same_line(state,param)
     {var after=param[3],width=param[2],before=param[1];
      format_string(state,before);
      state[9] = state[9] - width | 0;
      caml_call1(state[20],width);
      return format_string(state,after)}
    function advance_left(state)
     {for(;;)
       {var _i5_=state[28][2];
        if(_i5_)var content=_i5_[1],match$12=[0,content];else var match$12=0;
        if(match$12)
         {var
           match$13=match$12[1],
           size$0=match$13[1],
           length$0=match$13[3],
           token=match$13[2],
           pending_count=state[13] - state[12] | 0,
           _ja_=0 <= size$0?1:0,
           _jb_=_ja_ || (state[9] <= pending_count?1:0);
          if(_jb_)
           {var _jc_=state[28],_i6_=_jc_[2];
            if(_i6_)
             {if(_i6_[2])
               {var next=_i6_[2];_jc_[1] = _jc_[1] - 1 | 0;_jc_[2] = next}
              else
               clear$0(_jc_);
              var size$1=0 <= size$0?size$0:pp_infinity;
              if(typeof token === "number")
               switch(token)
                {case 0:
                  var match$3=top_opt(state[3]);
                  if(match$3)
                   {var
                     match$4=match$3[1],
                     tabs=match$4[1],
                     add_tab=
                      function(n,ls)
                       {if(ls)
                         {var l=ls[2],x=ls[1];
                          return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                        return [0,n,0]};
                    tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1])}
                  break;
                 case 1:pop_opt(state[2]);break;
                 case 2:pop_opt(state[3]);break;
                 case 3:
                  var match$5=top_opt(state[2]);
                  if(match$5)
                   {var match$6=match$5[1],width$0=match$6[2];
                    break_line(state,width$0)}
                  else
                   pp_output_newline(state);
                  break;
                 case 4:
                  if(state[10] !== (state[6] - state[9] | 0))
                   {var _i9_=state[28],_i7_=_i9_[2];
                    if(_i7_)
                     {var _i8_=_i7_[1];
                      if(_i7_[2])
                       {var next$0=_i7_[2];
                        _i9_[1] = _i9_[1] - 1 | 0;
                        _i9_[2] = next$0;
                        var match$1=[0,_i8_]}
                      else
                       {clear$0(_i9_);var match$1=[0,_i8_]}}
                    else
                     var match$1=0;
                    if(match$1)
                     {var match$2=match$1[1],size=match$2[1],length=match$2[3];
                      state[12] = state[12] - length | 0;
                      state[9] = state[9] + size | 0}}
                  break;
                 default:
                  var match$7=pop_opt(state[5]);
                  if(match$7)
                   {var
                     tag_name=match$7[1],
                     marker=caml_call1(state[25],tag_name);
                    pp_output_string(state,marker)}}
              else
               switch(token[0])
                {case 0:var s=token[1];format_pp_text(state,size$1,s);break;
                 case 1:
                  var
                   breaks=token[2],
                   fits=token[1],
                   off=breaks[2],
                   before=breaks[1],
                   match$8=top_opt(state[2]);
                  if(match$8)
                   {var
                     match$9=match$8[1],
                     width$1=match$9[2],
                     box_type$0=match$9[1];
                    switch(box_type$0)
                     {case 0:break_same_line(state,fits);break;
                      case 1:break_new_line(state,breaks,width$1);break;
                      case 2:break_new_line(state,breaks,width$1);break;
                      case 3:
                       if(state[9] < (size$1 + caml_ml_string_length(before) | 0))
                        break_new_line(state,breaks,width$1);
                       else
                        break_same_line(state,fits);
                       break;
                      case 4:
                       if(state[11])
                        break_same_line(state,fits);
                       else
                        if(state[9] < (size$1 + caml_ml_string_length(before) | 0))
                         break_new_line(state,breaks,width$1);
                        else
                         if(((state[6] - width$1 | 0) + off | 0) < state[10])
                          break_new_line(state,breaks,width$1);
                         else
                          break_same_line(state,fits);
                       break;
                      default:break_same_line(state,fits)}}
                  break;
                 case 2:
                  var
                   off$0=token[2],
                   n=token[1],
                   insertion_point=state[6] - state[9] | 0,
                   match$10=top_opt(state[3]);
                  if(match$10)
                   {var match$11=match$10[1],tabs$0=match$11[1],_i__=tabs$0[1];
                    if(_i__)
                     {var first=_i__[1],param=tabs$0[1];
                      for(;;)
                       {if(param)
                         {var tail=param[2],head=param[1];
                          if(! (insertion_point <= head)){var param=tail;continue}
                          var _i$_=head}
                        else
                         var _i$_=first;
                        var tab=_i$_;
                        break}}
                    else
                     var tab=insertion_point;
                    var offset=tab - insertion_point | 0;
                    if(0 <= offset)
                     break_same_line(state,[0,_bU_,offset + n | 0,_bT_]);
                    else
                     break_new_line(state,[0,_bW_,tab + off$0 | 0,_bV_],state[6])}
                  break;
                 case 3:
                  var
                   ty=token[2],
                   off$1=token[1],
                   insertion_point$0=state[6] - state[9] | 0;
                  if(state[8] < insertion_point$0)
                   {var match=top_opt(state[2]);
                    if(match)
                     {var match$0=match[1],width=match$0[2],box_type=match$0[1];
                      if(state[9] < width)
                       {var switcher=box_type - 1 | 0;
                        if(! (3 < switcher >>> 0))break_line(state,width)}}
                    else
                     pp_output_newline(state)}
                  var
                   width$2=state[9] - off$1 | 0,
                   box_type$1=1 === ty?1:state[9] < size$1?ty:5;
                  push([0,box_type$1,width$2],state[2]);
                  break;
                 case 4:var tbox=token[1];push(tbox,state[3]);break;
                 default:
                  var
                   tag_name$0=token[1],
                   marker$0=caml_call1(state[24],tag_name$0);
                  pp_output_string(state,marker$0);
                  push(tag_name$0,state[5])}
              state[12] = length$0 + state[12] | 0;
              continue}
            throw Empty}
          return _jb_}
        return 0}}
    function enqueue_advance(state,tok)
     {pp_enqueue(state,tok);return advance_left(state)}
    function enqueue_string_as(state,size,s)
     {return enqueue_advance(state,[0,size,[0,s],size])}
    function initialize_scan_stack(stack)
     {clear(stack);
      var queue_elem=[0,unknown,_bX_,0];
      return push([0,-1,queue_elem],stack)}
    function set_size(state,ty)
     {var match=top_opt(state[1]);
      if(match)
       {var
         match$0=match[1],
         queue_elem=match$0[2],
         left_total=match$0[1],
         _i2_=queue_elem[1];
        if(left_total < state[12])return initialize_scan_stack(state[1]);
        var _i3_=queue_elem[2];
        if(typeof _i3_ !== "number")
         switch(_i3_[0])
          {case 3:
            var _i4_=1 - ty;
            return _i4_
                    ?(queue_elem[1] = state[13] + _i2_ | 0,pop_opt(state[1]),0)
                    :_i4_;
           case 1:
           case 2:
            return ty
                    ?(queue_elem[1] = state[13] + _i2_ | 0,pop_opt(state[1]),0)
                    :ty
           }
        return 0}
      return 0}
    function scan_push(state,b,token)
     {pp_enqueue(state,token);
      if(b)set_size(state,1);
      var elem=[0,state[13],token];
      return push(elem,state[1])}
    function pp_open_box_gen(state,indent,br_ty)
     {state[14] = state[14] + 1 | 0;
      if(state[14] < state[15])
       {var size=- state[13] | 0,elem=[0,size,[3,indent,br_ty],0];
        return scan_push(state,0,elem)}
      var _i0_=state[14] === state[15]?1:0;
      if(_i0_)
       {var _i1_=state[16];
        return enqueue_string_as(state,caml_ml_string_length(_i1_),_i1_)}
      return _i0_}
    function pp_close_box(state,param)
     {var _iY_=1 < state[14]?1:0;
      if(_iY_)
       {if(state[14] < state[15])
         {pp_enqueue(state,[0,size,1,0]);set_size(state,1);set_size(state,0)}
        state[14] = state[14] - 1 | 0;
        var _iZ_=0}
      else
       var _iZ_=_iY_;
      return _iZ_}
    function pp_close_tag(state,param)
     {if(state[23])pp_enqueue(state,[0,size,5,0]);
      var _iW_=state[22];
      if(_iW_)
       {var match=pop_opt(state[4]);
        if(match){var tag_name=match[1];return caml_call1(state[27],tag_name)}
        var _iX_=0}
      else
       var _iX_=_iW_;
      return _iX_}
    function pp_flush_queue(state,b)
     {var _iV_=state[4];
      function f(param){return pp_close_tag(state,0)}
      iter(f,_iV_[1]);
      for(;;)
       {if(1 < state[14]){pp_close_box(state,0);continue}
        state[13] = pp_infinity;
        advance_left(state);
        if(b)pp_output_newline(state);
        state[12] = 1;
        state[13] = 1;
        clear$0(state[28]);
        initialize_scan_stack(state[1]);
        clear(state[2]);
        clear(state[3]);
        clear(state[4]);
        clear(state[5]);
        state[10] = 0;
        state[14] = 0;
        state[9] = state[6];
        return pp_open_box_gen(state,0,3)}}
    function pp_print_as_size(state,size,s)
     {var _iU_=state[14] < state[15]?1:0;
      return _iU_?enqueue_string_as(state,size,s):_iU_}
    function pp_print_as(state,isize,s)
     {return pp_print_as_size(state,isize,s)}
    function pp_print_char(state,c){return pp_print_as(state,1,make$0(1,c))}
    function pp_print_flush(state,param)
     {pp_flush_queue(state,0);return caml_call1(state[18],0)}
    var blank_line=make$0(80,32);
    function display_indent(state,n)
     {var n$0=n;
      for(;;)
       {var _iT_=0 < n$0?1:0;
        if(_iT_)
         {if(80 < n$0)
           {caml_call3(state[17],blank_line,0,80);
            var n$1=n$0 - 80 | 0,n$0=n$1;
            continue}
          return caml_call3(state[17],blank_line,0,n$0)}
        return _iT_}}
    function default_pp_mark_open_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return symbol(_b4_,symbol(s,_b3_))}
      return _b5_}
    function default_pp_mark_close_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return symbol(_b7_,symbol(s,_b6_))}
      return _b8_}
    function default_pp_print_open_tag(_iS_){return 0}
    function default_pp_print_close_tag(_iR_){return 0}
    function make_formatter(output,flush)
     {function j(_iQ_){return 0}
      function i(_iP_){return 0}
      function h(_iO_){return 0}
      var pp_queue=[0,0,0,0],sys_tok=[0,unknown,_b9_,0];
      add(sys_tok,pp_queue);
      var scan_stack=create(0);
      initialize_scan_stack(scan_stack);
      push([0,1,sys_tok],scan_stack);
      var
       _iI_=create(0),
       _iJ_=create(0),
       _iK_=create(0),
       ppf=
        [0,
         scan_stack,
         create(0),
         _iK_,
         _iJ_,
         _iI_,
         78,
         10,
         68,
         78,
         0,
         1,
         1,
         1,
         1,
         ux_eoi,
         _b__,
         output,
         flush,
         h,
         i,
         j,
         0,
         0,
         default_pp_mark_open_tag,
         default_pp_mark_close_tag,
         default_pp_print_open_tag,
         default_pp_print_close_tag,
         pp_queue];
      ppf[19] = function(_iN_){return caml_call3(ppf[17],_b2_,0,1)};
      ppf[20] = function(_iM_){return display_indent(ppf,_iM_)};
      ppf[21] = function(_iL_){return display_indent(ppf,_iL_)};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _iH_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(s,ofs,len)
                {if
                  (0
                   <=
                   ofs
                   &&
                   0
                   <=
                   len
                   &&
                   !
                   ((caml_ml_string_length(s) - len | 0) < ofs))
                  return caml_ml_output(oc,s,ofs,len);
                 return invalid_arg(_f_)},
               _iH_)}
    function formatter_of_buffer(b)
     {function _iC_(_iG_){return 0}
      return make_formatter
              (function(_iD_,_iE_,_iF_)
                {return add_substring(b,_iD_,_iE_,_iF_)},
               _iC_)}
    var
     buf=create$0(512),
     std_formatter=formatter_of_out_channel(stdout),
     err_formatter=formatter_of_out_channel(stderr),
     ppf=formatter_of_buffer(buf);
    function compute_tag(output,tag_acc)
     {var b=create$0(16),ppf=formatter_of_buffer(b);
      caml_call2(output,ppf,tag_acc);
      pp_print_flush(ppf,0);
      var len=b[2];
      if(2 <= len)
       {var len$0=len - 2 | 0,ofs=1;
        if(0 <= len$0 && ! ((b[2] - len$0 | 0) < 1))
         return sub_string(b[1],ofs,len$0);
        return invalid_arg(_v_)}
      return contents(b)}
    function output_acc(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          output_acc(ppf,p);
          if(typeof f === "number")
           switch(f)
            {case 0:return pp_close_box(ppf,0);
             case 1:return pp_close_tag(ppf,0);
             case 2:return pp_print_flush(ppf,0);
             case 3:
              var _iq_=ppf[14] < ppf[15]?1:0;
              return _iq_?enqueue_advance(ppf,[0,size,3,0]):_iq_;
             case 4:pp_flush_queue(ppf,1);return caml_call1(ppf[18],0);
             case 5:return pp_print_char(ppf,64);
             default:return pp_print_char(ppf,37)}
          else
           switch(f[0])
            {case 0:
              var
               offset=f[3],
               width$0=f[2],
               breaks=[0,_bZ_,offset,_bY_],
               fits=[0,_b1_,width$0,_b0_],
               after=fits[3],
               width=fits[2],
               before=fits[1],
               _ir_=ppf[14] < ppf[15]?1:0;
              if(_ir_)
               {var
                 size$0=- ppf[13] | 0,
                 token$0=[1,fits,breaks],
                 length=
                  (caml_ml_string_length(before) + width | 0)
                  +
                  caml_ml_string_length(after)
                  |
                  0,
                 elem=[0,size$0,token$0,length];
                return scan_push(ppf,1,elem)}
              return _ir_;
             case 1:return 0;
             default:
              var c=f[1];pp_print_char(ppf,64);return pp_print_char(ppf,c)}
         case 1:
          var _is_=acc[2],_it_=acc[1];
          if(0 === _is_[0])
           {var acc$0=_is_[1];
            output_acc(ppf,_it_);
            var tag_name=[0,String_tag,compute_tag(output_acc,acc$0)];
            if(ppf[22]){push(tag_name,ppf[4]);caml_call1(ppf[26],tag_name)}
            var _ip_=ppf[23];
            if(_ip_)
             {var token=[5,tag_name];return pp_enqueue(ppf,[0,size,token,0])}
            return _ip_}
          var acc$1=_is_[1];
          output_acc(ppf,_it_);
          var
           match=open_box_of_string(compute_tag(output_acc,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _iu_=acc[1],switch$1=0;
          if(typeof _iu_ !== "number" && 0 === _iu_[0])
           {var _iv_=_iu_[2],switch$2=0;
            if(typeof _iv_ !== "number" && 1 === _iv_[0])
             {var s$0=acc[2],size$1=_iv_[2],p$1=_iu_[1];
              switch$1 = 1;
              switch$2 = 1}}
          if(! switch$1){var s=acc[2],p$0=_iu_;switch$0 = 2}
          break;
         case 3:
          var _iw_=acc[1],switch$3=0;
          if(typeof _iw_ !== "number" && 0 === _iw_[0])
           {var _ix_=_iw_[2],switch$4=0;
            if(typeof _ix_ !== "number" && 1 === _ix_[0])
             {var c$1=acc[2],size$2=_ix_[2],p$3=_iw_[1];
              switch$0 = 1;
              switch$3 = 1;
              switch$4 = 1}}
          if(! switch$3){var c$0=acc[2],p$2=_iw_;switch$0 = 3}
          break;
         case 4:
          var _iy_=acc[1],switch$5=0;
          if(typeof _iy_ !== "number" && 0 === _iy_[0])
           {var _iz_=_iy_[2],switch$6=0;
            if(typeof _iz_ !== "number" && 1 === _iz_[0])
             {var s$0=acc[2],size$1=_iz_[2],p$1=_iy_[1];
              switch$5 = 1;
              switch$6 = 1}}
          if(! switch$5){var s=acc[2],p$0=_iy_;switch$0 = 2}
          break;
         case 5:
          var _iA_=acc[1],switch$7=0;
          if(typeof _iA_ === "number" || ! (0 === _iA_[0]))
           switch$7 = 1;
          else
           {var _iB_=_iA_[2],switch$8=0;
            if(typeof _iB_ !== "number" && 1 === _iB_[0])
             {var c$1=acc[2],size$2=_iB_[2],p$3=_iA_[1];
              switch$0 = 1;
              switch$8 = 1}
            if(! switch$8)switch$7 = 1}
          if(switch$7){var c$0=acc[2],p$2=_iA_;switch$0 = 3}
          break;
         case 6:
          var f$0=acc[2],p$4=acc[1];
          output_acc(ppf,p$4);
          return caml_call1(f$0,ppf);
         case 7:
          var p$5=acc[1];output_acc(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          output_acc(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:output_acc(ppf,p$1);return pp_print_as_size(ppf,size$1,s$0);
        case 1:
         output_acc(ppf,p$3);
         return pp_print_as_size(ppf,size$2,make$0(1,c$1));
        case 2:
         output_acc(ppf,p$0);
         return pp_print_as(ppf,caml_ml_string_length(s),s);
        default:output_acc(ppf,p$2);return pp_print_char(ppf,c$0)}}
    function kfprintf(k,ppf,param)
     {var fmt=param[1],_io_=0;
      return make_printf
              (function(acc){output_acc(ppf,acc);return caml_call1(k,ppf)},
               _io_,
               fmt)}
    function pp(ppf)
     {function _il_(_in_){return 0}
      return function(_im_){return kfprintf(_il_,ppf,_im_)}}
    var g=exit_function[1],f_already_ran=[0,0];
    exit_function[1]
    =
    function(param)
     {if(1 - f_already_ran[1])
       {f_already_ran[1] = 1;
        pp_print_flush(std_formatter,0);
        pp_print_flush(err_formatter,0)}
      return caml_call1(g,0)};
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var
     window=joo_global_object,
     no_handler=null,
     undefined$0=undefined,
     false$0=false,
     array_length=window.Array,
     Error=[248,_b$_,caml_fresh_oo_id(0)];
    register_exception(_ca_,[0,Error,{}]);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error)
         {var e=param[2];return [0,caml_string_of_jsstring(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_length
                ?0
                :[0,caml_string_of_jsstring(e.toString())]});
    function appendChild(p,n){p.appendChild(n);return 0}
    var t1=window.document;
    function unsafeCreateElement(doc,name)
     {var t23=caml_jsstring_of_string(name);return doc.createElement(t23)}
    function createTd(doc){return unsafeCreateElement(doc,_cc_)}
    caml_fresh_oo_id(0);
    var html_element=window.HTMLElement;
    html_element === undefined$0;
    function unsafe_set_byte(s,j,byte$0)
     {caml_bytes_unsafe_set(s,j,byte$0);return 0}
    var u_bom=65279,u_rep=65533;
    function malformed(s,j,l){return [0,659980059,sub_string(s,j,l)]}
    function malformed_pair(be,hi,s,j,l)
     {var s2=sub(s,j,l),s1=caml_create_bytes(2);
      if(be)var j1=1,j0=0;else var j1=0,j0=1;
      unsafe_set_byte(s1,j0,hi >>> 8 | 0);
      unsafe_set_byte(s1,j1,hi & 255);
      var
       l1=caml_ml_bytes_length(s1),
       l2=caml_ml_bytes_length(s2),
       r=caml_create_bytes(l1 + l2 | 0);
      caml_blit_bytes(s1,0,r,0,l1);
      caml_blit_bytes(s2,0,r,l1,l2);
      return [0,659980059,caml_string_of_bytes(r)]}
    var utf_8_len=_ce_.slice();
    function r_utf_8(s,j,l)
     {function uchar(c){return [0,852405675,c]}
      var switcher=l - 1 | 0;
      if(3 < switcher >>> 0)throw [0,Assert_failure,_cf_];
      switch(switcher)
       {case 0:return uchar(caml_bytes_unsafe_get(s,j));
        case 1:
         var
          b0=caml_bytes_unsafe_get(s,j),
          b1=caml_bytes_unsafe_get(s,j + 1 | 0);
         return 2 === (b1 >>> 6 | 0)
                 ?uchar((b0 & 31) << 6 | b1 & 63)
                 :malformed(s,j,l);
        case 2:
         var
          b0$0=caml_bytes_unsafe_get(s,j),
          b1$0=caml_bytes_unsafe_get(s,j + 1 | 0),
          b2=caml_bytes_unsafe_get(s,j + 2 | 0),
          c=(b0$0 & 15) << 12 | (b1$0 & 63) << 6 | b2 & 63;
         if(2 === (b2 >>> 6 | 0))
          {if(224 === b0$0)
            {if(160 <= b1$0 && ! (191 < b1$0))return uchar(c);
             return malformed(s,j,l)}
           if(237 === b0$0)
            {if(128 <= b1$0 && ! (159 < b1$0))return uchar(c);
             return malformed(s,j,l)}
           return 2 === (b1$0 >>> 6 | 0)?uchar(c):malformed(s,j,l)}
         return malformed(s,j,l);
        default:
         var
          b0$1=caml_bytes_unsafe_get(s,j),
          b1$1=caml_bytes_unsafe_get(s,j + 1 | 0),
          b2$0=caml_bytes_unsafe_get(s,j + 2 | 0),
          b3=caml_bytes_unsafe_get(s,j + 3 | 0),
          c$0=
           (b0$1 & 7)
           <<
           18
           |
           (b1$1 & 63)
           <<
           12
           |
           (b2$0 & 63)
           <<
           6
           |
           b3
           &
           63;
         if(2 === (b3 >>> 6 | 0) && 2 === (b2$0 >>> 6 | 0))
          {if(240 === b0$1)
            {if(144 <= b1$1 && ! (191 < b1$1))return uchar(c$0);
             return malformed(s,j,l)}
           if(244 === b0$1)
            {if(128 <= b1$1 && ! (143 < b1$1))return uchar(c$0);
             return malformed(s,j,l)}
           return 2 === (b1$1 >>> 6 | 0)?uchar(c$0):malformed(s,j,l)}
         return malformed(s,j,l)}}
    function r_utf_16(s,j0,j1)
     {var
       b0=caml_bytes_unsafe_get(s,j0),
       b1=caml_bytes_unsafe_get(s,j1),
       u=b0 << 8 | b1;
      if(55296 <= u && ! (57343 < u))
       return 56319 < u?malformed(s,min(j0,j1),2):[0,16161,u];
      return [0,852405675,u]}
    function r_utf_16_lo(hi,s,j0,j1)
     {var
       b0=caml_bytes_unsafe_get(s,j0),
       b1=caml_bytes_unsafe_get(s,j1),
       lo=b0 << 8 | b1;
      if(56320 <= lo && ! (57343 < lo))
       return [0,852405675,((hi & 1023) << 10 | lo & 1023) + 65536 | 0];
      return malformed_pair(j0 < j1?1:0,hi,s,min(j0,j1),2)}
    function i_rem(d){return (d[7] - d[6] | 0) + 1 | 0}
    function eoi(d){d[5] = empty;d[6] = 0;d[7] = min_int;return 0}
    function refill(k,d)
     {var _ii_=d[1];
      if(typeof _ii_ === "number"){d[18] = k;return 1006505782}
      if(438511779 <= _ii_[1])
       {var ic=_ii_[2],len=caml_ml_bytes_length(d[5]),_ij_=d[5],switch$0=0;
        if(0 <= len && ! ((caml_ml_bytes_length(_ij_) - len | 0) < 0))
         {var rc=caml_ml_input(ic,_ij_,0,len);switch$0 = 1}
        if(! switch$0)var rc=invalid_arg(_g_);
        var _ik_=d[5],switch$1=0,j=0;
        if(0 <= rc && ! (caml_ml_bytes_length(_ik_) < (rc | 0)))
         if(0 === rc)eoi(d);else{d[5] = _ik_;d[6] = j;d[7] = (rc | 0) - 1 | 0}
        else
         switch$1 = 1;
        if(switch$1)invalid_arg(caml_call2(sprintf(_cd_),j,rc));
        return caml_call1(k,d)}
      eoi(d);
      return caml_call1(k,d)}
    function t_need(d,need){d[9] = 0;d[10] = need;return 0}
    function t_fill(k,d)
     {function blit(d,l)
       {caml_blit_bytes(d[5],d[6],d[8],d[9],l);
        d[6] = d[6] + l | 0;
        d[9] = d[9] + l | 0;
        return 0}
      var rem=i_rem(d);
      if(0 <= rem)
       {var need=d[10] - d[9] | 0;
        return rem < need
                ?(blit(d,rem),refill(function(_ih_){return t_fill(k,_ih_)},d))
                :(blit(d,need),caml_call1(k,d))}
      return caml_call1(k,d)}
    function ret(k,v,byte_count,d)
     {d[18] = k;d[15] = d[15] + byte_count | 0;return caml_call2(d[17],d,v)}
    function decode_us_ascii(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {var j=d[6];
        d[6] = d[6] + 1 | 0;
        var
         _if_=d[5],
         b0=caml_bytes_unsafe_get(_if_,j),
         _ie_=1,
         _ig_=127 < b0?malformed(_if_,j,1):[0,852405675,b0];
        return ret(decode_us_ascii,_ig_,_ie_,d)}
      return 0 <= rem?refill(decode_us_ascii,d):3455931}
    function decode_iso_8859_1(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {var j=d[6];
        d[6] = d[6] + 1 | 0;
        return ret
                (decode_iso_8859_1,
                 [0,852405675,caml_bytes_unsafe_get(d[5],j)],
                 1,
                 d)}
      return 0 <= rem?refill(decode_iso_8859_1,d):3455931}
    function t_decode_utf_8(d)
     {if(d[9] < d[10])
       {var _ic_=d[9];return ret(decode_utf_8,malformed(d[8],0,d[9]),_ic_,d)}
      var _id_=d[9];
      return ret(decode_utf_8,r_utf_8(d[8],0,d[9]),_id_,d)}
    function decode_utf_8(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {var need=utf_8_len[1 + caml_bytes_unsafe_get(d[5],d[6])];
        if(rem < need){t_need(d,need);return t_fill(t_decode_utf_8,d)}
        var j=d[6];
        return 0 === need
                ?(d[6]
                  =
                  d[6]
                  +
                  1
                  |
                  0,
                  ret(decode_utf_8,malformed(d[5],j,1),1,d))
                :(d[6]
                  =
                  d[6]
                  +
                  need
                  |
                  0,
                  ret(decode_utf_8,r_utf_8(d[5],j,need),need,d))}
      return 0 <= rem?refill(decode_utf_8,d):3455931}
    function t_decode_utf_16be_lo(hi,d)
     {var bcount=d[9] + 2 | 0;
      return d[9] < d[10]
              ?ret(decode_utf_16be,malformed_pair(1,hi,d[8],0,d[9]),bcount,d)
              :ret(decode_utf_16be,r_utf_16_lo(hi,d[8],0,1),bcount,d)}
    function decode_utf_16be_lo(v,d)
     {if(659980059 <= v[1])return ret(decode_utf_16be,v,2,d);
      var hi=v[2],rem=i_rem(d);
      if(2 <= rem)
       {var j=d[6];
        d[6] = d[6] + 2 | 0;
        return ret(decode_utf_16be,r_utf_16_lo(hi,d[5],j,j + 1 | 0),4,d)}
      t_need(d,2);
      return t_fill(function(_ib_){return t_decode_utf_16be_lo(hi,_ib_)},d)}
    function t_decode_utf_16be(d)
     {if(d[9] < d[10])
       {var _ia_=d[9];
        return ret(decode_utf_16be,malformed(d[8],0,d[9]),_ia_,d)}
      return decode_utf_16be_lo(r_utf_16(d[8],0,1),d)}
    function decode_utf_16be(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {if(2 <= rem)
         {var j=d[6];
          d[6] = d[6] + 2 | 0;
          return decode_utf_16be_lo(r_utf_16(d[5],j,j + 1 | 0),d)}
        t_need(d,2);
        return t_fill(t_decode_utf_16be,d)}
      return 0 <= rem?refill(decode_utf_16be,d):3455931}
    function t_decode_utf_16_lo(hi,d)
     {var bcount=d[9] + 2 | 0;
      return d[9] < d[10]
              ?ret(decode_utf_16,malformed_pair(0,hi,d[8],0,d[9]),bcount,d)
              :ret(decode_utf_16,r_utf_16_lo(hi,d[8],1,0),bcount,d)}
    function decode_utf_16le_lo(v,d)
     {if(659980059 <= v[1])return ret(decode_utf_16,v,2,d);
      var hi=v[2],rem=i_rem(d);
      if(2 <= rem)
       {var j=d[6];
        d[6] = d[6] + 2 | 0;
        return ret(decode_utf_16,r_utf_16_lo(hi,d[5],j + 1 | 0,j),4,d)}
      t_need(d,2);
      return t_fill(function(_h$_){return t_decode_utf_16_lo(hi,_h$_)},d)}
    function t_decode_utf_16(d)
     {if(d[9] < d[10])
       {var _h__=d[9];return ret(decode_utf_16,malformed(d[8],0,d[9]),_h__,d)}
      return decode_utf_16le_lo(r_utf_16(d[8],1,0),d)}
    function decode_utf_16(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {if(2 <= rem)
         {var j=d[6];
          d[6] = d[6] + 2 | 0;
          return decode_utf_16le_lo(r_utf_16(d[5],j + 1 | 0,j),d)}
        t_need(d,2);
        return t_fill(t_decode_utf_16,d)}
      return 0 <= rem?refill(decode_utf_16,d):3455931}
    function guessed_utf_16(d,be,v)
     {if(be)
       var
        j1=1,
        j0=0,
        t_decode_utf_16_lo$0=t_decode_utf_16be_lo,
        t_decode_utf_16$0=t_decode_utf_16be,
        decode_utf_16$0=decode_utf_16be;
      else
       var
        j1=0,
        j0=1,
        t_decode_utf_16_lo$0=t_decode_utf_16_lo,
        t_decode_utf_16$0=t_decode_utf_16,
        decode_utf_16$0=decode_utf_16;
      function b3(k,d)
       {return 3 <= d[9]
                ?(d[10]
                  =
                  2,
                  d[9]
                  =
                  1,
                  unsafe_set_byte(d[8],0,caml_bytes_unsafe_get(d[8],2)),
                  t_fill(k,d))
                :decode_utf_16$0(d)}
      if(typeof v === "number")
       {if(427938126 <= v)
         {var v$0=r_utf_16(d[8],j0,j1);
          if(659980059 <= v$0[1])
           {var _h0_=2;
            return ret
                    (function(_h9_){return b3(t_decode_utf_16$0,_h9_)},
                     v$0,
                     _h0_,
                     d)}
          var hi=v$0[2];
          if(3 <= d[9])
           return b3(function(_h8_){return t_decode_utf_16_lo$0(hi,_h8_)},d);
          var _h1_=d[9];
          return ret(decode_utf_16$0,malformed_pair(be,hi,empty,0,0),_h1_,d)}
        var _h2_=2,_h3_=[0,852405675,u_bom];
        return ret
                (function(_h7_){return b3(t_decode_utf_16$0,_h7_)},
                 _h3_,
                 _h2_,
                 d)}
      var u=v[2],_h4_=2,_h5_=[0,852405675,u];
      return ret
              (function(_h6_){return b3(t_decode_utf_16$0,_h6_)},_h5_,_h4_,d)}
    function k(d)
     {function setup(d)
       {var _hX_=d[9],_hY_=d[8];
        function some(i)
         {return i < _hX_?[0,caml_bytes_unsafe_get(_hY_,i | 0)]:0}
        var match=some(0),match$0=some(1),match$1=some(2);
        if(match)
         {var _hU_=match[1],switch$0=0;
          if(240 <= _hU_)
           if(254 === _hU_)
            {if(match$0)
              if(255 === match$0[1])
               {var match$2=_cg_;switch$0 = 1}
              else
               switch$0 = 2}
           else
            if(255 === _hU_)
             {if(match$0)
               if(254 === match$0[1])
                {var match$2=_cl_;switch$0 = 1}
               else
                switch$0 = 2}
            else
             switch$0 = 2;
          else
           if(0 === _hU_)
            {if(match$0)
              {var p=match$0[1];
               if(0 < p)
                {var match$2=[0,-211558048,[0,605782321,p]];switch$0 = 1}
               else
                switch$0 = 2}}
           else
            if(239 <= _hU_)
             {if(match$0)
               if(187 === match$0[1])
                {if(match$1 && 191 === match$1[1])
                  {var match$2=_cm_;switch$0 = 1}}
               else
                switch$0 = 2}
            else
             switch$0 = 2;
          var switch$1=0;
          switch(switch$0)
           {case 2:
             if(match$0 && 0 === match$0[1] && 0 < _hU_)
              var match$2=[0,-211555818,[0,605782321,_hU_]];
             else
              switch$1 = 1;
             break;
            case 0:switch$1 = 1;break
            }
          if(switch$1)
           if(0 === caml_check_bound(utf_8_len,_hU_)[1 + _hU_])
            if(match$0)
             var match$2=_ch_;
            else
             {if(match$1)throw [0,Assert_failure,_ci_];var match$2=_cj_}
           else
            var match$2=_ck_}
        else
         {if(match$0)throw [0,Assert_failure,_cn_];
          if(match$1)throw [0,Assert_failure,_co_];
          var match$2=_cp_}
        var _hZ_=match$2[1];
        if(-211555818 === _hZ_)
         {var r=match$2[2];
          d[2] = -211555818;
          d[18] = decode_utf_16;
          return guessed_utf_16(d,0,r)}
        if(684370880 <= _hZ_)
         {var r$0=match$2[2];
          d[2] = 684370880;
          d[18] = decode_utf_8;
          if(3455931 === r$0)return 3455931;
          if(427938126 <= r$0)
           {var
             b3=
              function(d)
               {var
                 b3=caml_bytes_unsafe_get(d[8],2),
                 n=caml_check_bound(utf_8_len,b3)[1 + b3];
                return 0 === n
                        ?ret(decode_utf_8,malformed(d[8],2,1),1,d)
                        :(d[10]
                          =
                          n,
                          d[9]
                          =
                          1,
                          unsafe_set_byte(d[8],0,b3),
                          t_fill(t_decode_utf_8,d))},
             b2=
              function(d)
               {var
                 b2=caml_bytes_unsafe_get(d[8],1),
                 b3$0=2 < d[9]?b3:decode_utf_8,
                 n=caml_check_bound(utf_8_len,b2)[1 + b2];
                if(0 === n)return ret(b3$0,malformed(d[8],1,1),1,d);
                if(1 === n)return ret(b3$0,r_utf_8(d[8],1,1),1,d);
                d[10] = n;
                unsafe_set_byte(d[8],0,b2);
                if(3 <= d[9])
                 {d[9] = 2;
                  unsafe_set_byte(d[8],1,caml_bytes_unsafe_get(d[8],2))}
                else
                 d[9] = 1;
                return t_fill(t_decode_utf_8,d)},
             b1=caml_bytes_unsafe_get(d[8],0),
             b2$0=1 < d[9]?b2:decode_utf_8,
             n=caml_check_bound(utf_8_len,b1)[1 + b1];
            if(4 < n >>> 0)throw [0,Assert_failure,_cq_];
            switch(n)
             {case 0:return ret(b2$0,malformed(d[8],0,1),1,d);
              case 1:return ret(b2$0,r_utf_8(d[8],0,1),1,d);
              case 2:
               return 2 <= d[9]
                       ?3 <= d[9]
                         ?ret(b3,r_utf_8(d[8],0,2),2,d)
                         :ret(decode_utf_8,r_utf_8(d[8],0,2),2,d)
                       :ret(decode_utf_8,malformed(d[8],0,1),1,d);
              case 3:
               if(3 <= d[9])return ret(decode_utf_8,r_utf_8(d[8],0,3),3,d);
               var _hV_=d[9];
               return ret(decode_utf_8,malformed(d[8],0,d[9]),_hV_,d);
              default:
               if(3 <= d[9]){d[10] = 4;return t_fill(t_decode_utf_8,d)}
               var _hW_=d[9];
               return ret(decode_utf_8,malformed(d[8],0,d[9]),_hW_,d)}}
          return ret(decode_utf_8,[0,852405675,u_bom],3,d)}
        var r$1=match$2[2];
        d[2] = -211558048;
        d[18] = decode_utf_16be;
        return guessed_utf_16(d,1,r$1)}
      t_need(d,3);
      return t_fill(setup,d)}
    function nline(d){d[14] = 0;d[13] = d[13] + 1 | 0;return 0}
    function ncol(d){d[14] = d[14] + 1 | 0;return 0}
    function ncount(d){d[16] = d[16] + 1 | 0;return 0}
    function cr(d,b){d[12] = b;return 0}
    function pp$0(d,v)
     {if(852405675 <= v[1])
       {var u=v[2],_hT_=u - 133 | 0,switch$0=0;
        if(8100 < _hT_ >>> 0)
         {var switcher=_hT_ + 123 | 0;
          if(! (3 < switcher >>> 0))
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              ncount(d);
              return last_cr?v:(nline(d),v);
             case 1:break;
             case 2:switch$0 = 1;break;
             default:cr(d,1);ncount(d);nline(d);return v}}
        else
         if(8097 < (_hT_ - 1 | 0) >>> 0)switch$0 = 1;
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),v)
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function pp_nln_readline(d,v)
     {if(852405675 <= v[1])
       {var u=v[2],_hS_=u - 133 | 0,switch$0=0;
        if(8100 < _hS_ >>> 0)
         {var switcher=_hS_ + 123 | 0;
          if(! (3 < switcher >>> 0))
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              return last_cr
                      ?caml_call1(d[18],d)
                      :(ncount(d),nline(d),[0,852405675,d[4]]);
             case 1:break;
             case 2:switch$0 = 1;break;
             default:cr(d,1);ncount(d);nline(d);return [0,852405675,d[4]]}}
        else
         if(8097 < (_hS_ - 1 | 0) >>> 0)switch$0 = 1;
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),[0,852405675,d[4]])
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function pp_nln_nlf(d,v)
     {if(852405675 <= v[1])
       {var u=v[2],switch$0=0;
        if(14 <= u)
         {if(8232 <= u)
           {if(! (8234 <= u))switch$0 = 1}
          else
           if(133 === u){cr(d,0);ncount(d);nline(d);return [0,852405675,d[4]]}}
        else
         if(10 <= u)
          {var switcher=u - 10 | 0;
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              return last_cr
                      ?caml_call1(d[18],d)
                      :(ncount(d),nline(d),[0,852405675,d[4]]);
             case 1:break;
             case 2:switch$0 = 1;break;
             default:cr(d,1);ncount(d);nline(d);return [0,852405675,d[4]]}}
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),v)
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function pp_nln_ascii(d,v)
     {if(852405675 <= v[1])
       {var u=v[2],_hR_=u - 133 | 0,switch$0=0;
        if(8100 < _hR_ >>> 0)
         {var switcher=_hR_ + 123 | 0;
          if(! (3 < switcher >>> 0))
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              return last_cr
                      ?caml_call1(d[18],d)
                      :(ncount(d),nline(d),[0,852405675,d[4]]);
             case 1:break;
             case 2:switch$0 = 1;break;
             default:cr(d,1);ncount(d);nline(d);return [0,852405675,d[4]]}}
        else
         if(8097 < (_hR_ - 1 | 0) >>> 0)switch$0 = 1;
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),v)
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function add_utf_8(b,u)
     {function w(byte$0){return add_char(b,byte$0)}
      return 127 < u
              ?2047 < u
                ?65535 < u
                  ?(w(240 | u >>> 18 | 0),
                    w(128 | (u >>> 12 | 0) & 63),
                    w(128 | (u >>> 6 | 0) & 63),
                    w(128 | u & 63))
                  :(w(224 | u >>> 12 | 0),
                    w(128 | (u >>> 6 | 0) & 63),
                    w(128 | u & 63))
                :(w(192 | u >>> 6 | 0),w(128 | u & 63))
              :w(u)}
    function unsafe_blit(s,soff,d,doff)
     {var _hP_=caml_bytes_of_string(s);
      return function(_hQ_){return caml_blit_bytes(_hP_,soff,d,doff,_hQ_)}}
    function unsafe_set_byte$0(s,j,byte$0)
     {caml_bytes_unsafe_set(s,j,byte$0);return 0}
    var
     ux_soi=2147483646,
     u_nl=10,
     u_sp=32,
     u_quot=34,
     u_lbrack=91,
     u_rbrack=93,
     u_lbrace=123,
     u_rbrace=125,
     u_colon=58,
     u_comma=44,
     u_slash=47,
     u_bslash=92,
     u_times=42;
    function is_white(param)
     {var switch$0=0;
      if(11 <= param)
       {if(32 === param)switch$0 = 1}
      else
       if(9 <= param)switch$0 = 1;
      return switch$0?1:0}
    function is_val_sep(param)
     {var switch$0=0;
      if(44 <= param)
       {var _hO_=param - 45 | 0;
        if(79 < _hO_ >>> 0)
         {if(! (81 <= _hO_))switch$0 = 1}
        else
         if(48 === _hO_)switch$0 = 1}
      else
       if(11 <= param)
        {if(32 === param)switch$0 = 1}
       else
        if(9 <= param)switch$0 = 1;
      return switch$0?1:0}
    function pp_lexeme(ppf,param)
     {if(typeof param === "number")
       return 14610 === param
               ?caml_call1(pp(ppf),_cr_)
               :17732 <= param
                 ?870828711 <= param
                   ?caml_call1(pp(ppf),_cs_)
                   :caml_call1(pp(ppf),_ct_)
                 :17718 <= param
                   ?caml_call1(pp(ppf),_cu_)
                   :caml_call1(pp(ppf),_cv_);
      var _hM_=param[1];
      if(737456202 <= _hM_)
       {if(869834347 <= _hM_)
         {var s=param[2];return caml_call2(pp(ppf),_cw_,s)}
        var b=param[2];
        return caml_call2(pp(ppf),_cx_,b)}
      if(365180284 <= _hM_)
       {var f=param[2],_hN_=string_of_float(f);
        return caml_call2(pp(ppf),_cy_,_hN_)}
      var s$0=param[2];
      return caml_call2(pp(ppf),_cz_,s$0)}
    function err_lone_hi(p)
     {return [0,106380200,[0,992790154,[0,225181919,p]]]}
    function err_number(s){return [0,106380200,[0,30214610,s]]}
    function pp_cp(ppf,u){return caml_call2(pp(ppf),_cA_,u)}
    function pp_uchar(ppf,u)
     {if(31 < u)
       {var b=create$0(4);
        add_utf_8(b,u);
        var _hL_=contents(b);
        return caml_call4(pp(ppf),_cB_,_hL_,pp_cp,u)}
      return pp_cp(ppf,u)}
    function pp_error(ppf,param)
     {if(typeof param === "number")return caml_call1(pp(ppf),_cC_);
      var _hE_=param[1];
      if(30214610 <= _hE_)
       {if(732461442 <= _hE_)
         {if(992790154 <= _hE_)
           {var r=param[2];
            caml_call1(pp(ppf),_cD_);
            var _hF_=r[1];
            if(153884648 === _hF_)
             {var p=r[2];return caml_call3(pp(ppf),_cE_,pp_cp,p)}
            if(429931233 <= _hF_)
             {if(508493173 <= _hF_)
               {var u=r[2];return caml_call3(pp(ppf),_cF_,pp_uchar,u)}
              var p$0=r[2];
              return caml_call3(pp(ppf),_cG_,pp_cp,p$0)}
            if(225181919 <= _hF_)
             {var p$1=r[2];return caml_call3(pp(ppf),_cH_,pp_cp,p$1)}
            var u$0=r[2];
            return caml_call3(pp(ppf),_cI_,pp_uchar,u$0)}
          var bs=param[2],l=caml_ml_string_length(bs);
          caml_call1(pp(ppf),_cJ_);
          if(0 < l)
           {var _hG_=caml_string_get(bs,0);caml_call2(pp(ppf),_cK_,_hG_)}
          var _hI_=l - 1 | 0,_hH_=1;
          if(! (_hI_ < 1))
           {var i=_hH_;
            for(;;)
             {var _hJ_=caml_string_get(bs,i);
              caml_call2(pp(ppf),_cM_,_hJ_);
              var _hK_=i + 1 | 0;
              if(_hI_ !== i){var i=_hK_;continue}
              break}}
          return caml_call1(pp(ppf),_cL_)}
        if(434236056 <= _hE_)
         {var r$0=param[2];
          caml_call1(pp(ppf),_cN_);
          return typeof r$0 === "number"
                  ?3456159 <= r$0
                    ?826371656 <= r$0
                      ?869834347 <= r$0
                        ?caml_call1(pp(ppf),_cO_)
                        :caml_call1(pp(ppf),_cP_)
                      :713199754 <= r$0
                        ?caml_call1(pp(ppf),_cQ_)
                        :caml_call1(pp(ppf),_cR_)
                    :-826170817 <= r$0
                      ?caml_call1(pp(ppf),_cS_)
                      :caml_call1(pp(ppf),_cT_)
                  :881518886 <= r$0[1]
                    ?r$0[2]?caml_call1(pp(ppf),_cU_):caml_call1(pp(ppf),_cV_)
                    :r$0[2]?caml_call1(pp(ppf),_cW_):caml_call1(pp(ppf),_cX_)}
        var n=param[2];
        return caml_call2(pp(ppf),_cY_,n)}
      if(-364210971 === _hE_)
       {var r$1=param[2];
        caml_call1(pp(ppf),_cZ_);
        return 14610 <= r$1
                ?17732 <= r$1
                  ?caml_call1(pp(ppf),_c0_)
                  :caml_call1(pp(ppf),_c1_)
                :-826170817 <= r$1
                  ?caml_call1(pp(ppf),_c2_)
                  :caml_call1(pp(ppf),_c3_)}
      if(-67383738 <= _hE_)
       {var l$0=param[2];return caml_call2(pp(ppf),_c4_,l$0)}
      var u$1=param[2];
      return caml_call3(pp(ppf),_c5_,pp_uchar,u$1)}
    function pp_decode(ppf,param)
     {if(typeof param === "number")
       return 1006505782 <= param
               ?caml_call1(pp(ppf),_c6_)
               :caml_call1(pp(ppf),_c7_);
      var _hD_=param[1];
      if(-588596599 <= _hD_)
       {if(106380200 <= _hD_)
         {var e=param[2];return caml_call3(pp(ppf),_c8_,pp_error,e)}
        var s=param[2];
        return caml_call2(pp(ppf),_c9_,s)}
      if(-633954146 <= _hD_)
       {var l=param[2];return caml_call3(pp(ppf),_c__,pp_lexeme,l)}
      var match=param[2],s$0=match[2],style=match[1];
      function pr_style(ppf,param)
       {return 83 <= param?caml_call1(pp(ppf),_c$_):caml_call1(pp(ppf),_da_)}
      return caml_call4(pp(ppf),_db_,pr_style,style,s$0)}
    function baddc(d,c){return add_utf_8(d[2],c)}
    function badd(d){return add_utf_8(d[2],d[8])}
    function buf$0(d){var t=contents(d[2]);clear$1(d[2]);return t}
    function dpos(d){return [0,d[1][13],d[1][14]]}
    function spos(d){d[4] = d[1][13];d[5] = d[1][14];return 0}
    function epos(d){d[6] = d[1][13];d[7] = d[1][14];return 0}
    function stack_range(d)
     {var _hC_=d[9];
      if(_hC_)
       {var match=_hC_[1][2],c=match[2],l=match[1];
        d[4] = l;
        d[5] = c;
        return epos(d)}
      throw [0,Assert_failure,_dc_]}
    function dpop(d)
     {spos(d);
      epos(d);
      var _hA_=d[9];
      if(_hA_)
       {var _hB_=_hA_[2];
        return _hB_
                ?17732 <= _hB_[1][1]
                  ?(d[10] = 1,d[9] = _hB_,0)
                  :(d[10] = 0,d[9] = _hB_,0)
                :(d[10] = 0,d[9] = 0,0)}
      throw [0,Assert_failure,_dd_]}
    function k$0(d){return 3455931}
    function ret$0(v,k,d){d[12] = k;return v}
    function readc(k,d)
     {var _hy_=d[1],match=caml_call1(_hy_[18],_hy_);
      if(typeof match === "number")
       return 1006505782 <= match
               ?ret$0(1006505782,function(_hz_){return readc(k,_hz_)},d)
               :(d[8] = ux_eoi,caml_call1(k,d));
      if(852405675 <= match[1])
       {var u=match[2];d[8] = u;return caml_call1(k,d)}
      var bs=match[2];
      d[8] = u_rep;
      epos(d);
      return ret$0([0,106380200,[0,732461442,bs]],k,d)}
    function r_scomment(k,d)
     {if(d[8] !== 10 && d[8] !== 2147483647)
       {badd(d);return readc(function(_hx_){return r_scomment(k,_hx_)},d)}
      epos(d);
      function _hv_(_hw_){return readc(k,_hw_)}
      return ret$0([0,-826170817,[0,83,buf$0(d)]],_hv_,d)}
    function r_mcomment(closing,k,d)
     {if(d[8] === 2147483647)
       {epos(d);return ret$0(err_unclosed_comment,k$0,d)}
      if(closing)
       {if(d[8] === 47)
         {epos(d);
          var _hl_=function(_hu_){return readc(k,_hu_)};
          return ret$0([0,-826170817,[0,77,buf$0(d)]],_hl_,d)}
        if(d[8] === 42)
         {badd(d);
          var _hm_=1;
          return readc(function(_ht_){return r_mcomment(_hm_,k,_ht_)},d)}
        baddc(d,u_times);
        badd(d);
        var _hn_=0;
        return readc(function(_hs_){return r_mcomment(_hn_,k,_hs_)},d)}
      if(d[8] === 42)
       {var _ho_=1;
        return readc(function(_hr_){return r_mcomment(_ho_,k,_hr_)},d)}
      badd(d);
      var _hp_=0;
      return readc(function(_hq_){return r_mcomment(_hp_,k,_hq_)},d)}
    function r_ws_uncut(k,d)
     {return is_white(d[8])
              ?(epos(d),
                badd(d),
                readc(function(_hk_){return r_ws_uncut(k,_hk_)},d))
              :ret$0([0,-588596599,buf$0(d)],k,d)}
    function r_white_uncut(k,d)
     {if(is_white(d[8]))
       {spos(d);
        return r_ws_uncut(function(_hj_){return r_white_uncut(k,_hj_)},d)}
      if(d[8] === 47)
       {spos(d);
        var k$0=function(_hi_){return r_white_uncut(k,_hi_)};
        return readc
                (function(d)
                  {if(d[8] === 47)
                    return readc(function(_hh_){return r_scomment(k$0,_hh_)},d);
                   if(d[8] === 42)
                    {var _hf_=0;
                     return readc
                             (function(_hg_){return r_mcomment(_hf_,k$0,_hg_)},d)}
                   epos(d);
                   return ret$0(err_exp_comment,k$0,d)},
                 d)}
      return caml_call1(k,d)}
    function r_ws(k,d)
     {return is_white(d[8])
              ?readc(function(_he_){return r_ws(k,_he_)},d)
              :caml_call1(k,d)}
    function r_white(k,d){return d[3]?r_white_uncut(k,d):r_ws(k,d)}
    function r_escape(k,d)
     {var _g9_=d[8];
      if(34 === _g9_){baddc(d,u_quot);return readc(k,d)}
      if(92 <= _g9_)
       {if(! (118 <= _g9_))
         {var switcher=_g9_ - 92 | 0;
          switch(switcher)
           {case 0:baddc(d,u_bslash);return readc(k,d);
            case 6:baddc(d,8);return readc(k,d);
            case 10:baddc(d,12);return readc(k,d);
            case 18:baddc(d,u_nl);return readc(k,d);
            case 22:baddc(d,13);return readc(k,d);
            case 24:baddc(d,9);return readc(k,d);
            case 25:
             var _g$_=4,_ha_=0,_hb_=0;
             return readc
                     (function(_hd_){return r_u_escape(_hb_,_ha_,_g$_,k,_hd_)},d)
            }}}
      else
       if(47 === _g9_){baddc(d,u_slash);return readc(k,d)}
      epos(d);
      baddc(d,u_rep);
      function _g__(_hc_){return readc(k,_hc_)}
      return ret$0
              ([0,106380200,[0,992790154,[0,508493173,of_int(_g9_)]]],_g__,d)}
    function r_u_escape(hi,u,count,k,d)
     {function error(err,k,d){baddc(d,u_rep);return ret$0(err,k,d)}
      if(0 < count)
       {var _gX_=d[8],_gR_=48 <= _gX_?1:0,_gS_=_gR_?_gX_ <= 57?1:0:_gR_;
        if(_gS_)
         var _gT_=_gS_;
        else
         {var _gU_=65 <= _gX_?1:0,_gV_=_gU_?_gX_ <= 70?1:0:_gU_;
          if(_gV_)
           var _gT_=_gV_;
          else
           var _gW_=97 <= _gX_?1:0,_gT_=_gW_?_gX_ <= 102?1:0:_gW_}
        if(_gT_)
         {var
           _gY_=57 < d[8]?70 < d[8]?d[8] - 87 | 0:d[8] - 55 | 0:d[8] - 48 | 0,
           u$0=(u * 16 | 0) + _gY_ | 0;
          epos(d);
          var _gZ_=count - 1 | 0;
          return readc
                  (function(_g8_){return r_u_escape(hi,u$0,_gZ_,k,_g8_)},d)}
        epos(d);
        var _g0_=function(_g7_){return readc(k,_g7_)};
        return error
                ([0,106380200,[0,992790154,[0,-542918501,of_int(d[8])]]],
                 _g0_,
                 d)}
      if(hi)
       {var hi$0=hi[1];
        if(56320 <= u && ! (57343 < u))
         {var u$1=((hi$0 & 1023) << 10 | u & 1023) + 65536 | 0;
          baddc(d,u$1);
          return caml_call1(k,d)}
        return error([0,106380200,[0,992790154,[0,153884648,u]]],k,d)}
      if(55296 <= u && ! (57343 < u))
       return 56319 < u
               ?error([0,106380200,[0,992790154,[0,429931233,u]]],k,d)
               :d[8] !== 92
                 ?error(err_lone_hi(u),k,d)
                 :readc
                   (function(d)
                     {if(117 === d[8])
                       {var _g1_=4,_g2_=0,_g3_=[0,u];
                        return readc
                                (function(_g6_){return r_u_escape(_g3_,_g2_,_g1_,k,_g6_)},d)}
                      function _g4_(_g5_){return r_escape(k,_g5_)}
                      return error(err_lone_hi(u),_g4_,d)},
                    d);
      baddc(d,u);
      return caml_call1(k,d)}
    function r_string(k,d)
     {if(d[8] === 2147483647){epos(d);return ret$0(err_unclosed_string,k$0,d)}
      var _gI_=d[8],_gF_=_gI_ <= 31?1:0;
      if(_gF_)
       var _gG_=_gF_;
      else
       var _gH_=34 === _gI_?1:0,_gG_=_gH_ || (92 === _gI_?1:0);
      if(_gG_)
       {if(d[8] === 34){epos(d);return readc(k,d)}
        if(d[8] === 92)
         {var _gJ_=function(_gQ_){return r_string(k,_gQ_)};
          return readc(function(_gP_){return r_escape(_gJ_,_gP_)},d)}
        epos(d);
        baddc(d,u_rep);
        var
         _gK_=function(_gO_){return r_string(k,_gO_)},
         _gL_=function(_gN_){return readc(_gK_,_gN_)};
        return ret$0([0,106380200,[0,-635137946,of_int(d[8])]],_gL_,d)}
      badd(d);
      return readc(function(_gM_){return r_string(k,_gM_)},d)}
    function r_float(k,d)
     {if(! is_val_sep(d[8]) && d[8] !== 2147483647)
       {epos(d);
        badd(d);
        return readc(function(_gE_){return r_float(k,_gE_)},d)}
      var s=buf$0(d);
      try
       {var
         _gC_=
          ret$0([0,-633954146,[0,365180284,caml_float_of_string(s)]],k,d);
        return _gC_}
      catch(_gD_)
       {_gD_ = caml_wrap_exception(_gD_);
        if(_gD_[1] === Failure)return ret$0(err_number(s),k,d);
        throw _gD_}}
    function r_literal(k,d)
     {if(! is_val_sep(d[8]) && d[8] !== 2147483647)
       {epos(d);
        badd(d);
        return readc(function(_gB_){return r_literal(k,_gB_)},d)}
      var s=buf$0(d);
      return caml_string_notequal(s,_de_)
              ?caml_string_notequal(s,_df_)
                ?caml_string_notequal(s,_dg_)
                  ?ret$0([0,106380200,[0,-67383738,s]],k,d)
                  :ret$0(_dh_,k,d)
                :ret$0(_di_,k,d)
              :ret$0(_dj_,k,d)}
    function r_value(err,k,d)
     {var _gu_=d[8],switch$0=0;
      if(103 <= _gu_)
       {var switcher=_gu_ - 110 | 0;
        if(6 < switcher >>> 0)
         {if(13 === switcher)
           {spos(d);
            epos(d);
            d[11] = 1;
            d[10] = 1;
            var _gv_=d[9];
            d[9] = [0,[0,17732,dpos(d)],_gv_];
            return ret$0(_dk_,function(_gy_){return readc(k,_gy_)},d)}}
        else
         if(4 < (switcher - 1 | 0) >>> 0)switch$0 = 1}
      else
       {if(34 === _gu_)
         {spos(d);
          var
           _gw_=
            function(d)
             {return ret$0([0,-633954146,[0,-976970511,buf$0(d)]],k,d)};
          return readc(function(_gA_){return r_string(_gw_,_gA_)},d)}
        if(91 === _gu_)
         {spos(d);
          epos(d);
          d[11] = 1;
          var _gx_=d[9];
          d[9] = [0,[0,14610,dpos(d)],_gx_];
          return ret$0(_dl_,function(_gz_){return readc(k,_gz_)},d)}
        if(102 <= _gu_)switch$0 = 1}
      if(switch$0){spos(d);return r_literal(k,d)}
      var _gs_=48 <= _gu_?1:0,_gt_=_gs_?_gu_ <= 57?1:0:_gs_;
      if(! _gt_ && _gu_ !== 45)return caml_call2(err,k,d);
      spos(d);
      return r_float(k,d)}
    function discard_to(c1,c2,err,k,d)
     {if(d[8] !== c1 && d[8] !== c2 && d[8] !== 2147483647)
       {epos(d);
        return readc(function(_gr_){return discard_to(c1,c2,err,k,_gr_)},d)}
      return ret$0(err,k,d)}
    function nxmem(err,k,d)
     {spos(d);d[10] = 1;return discard_to(u_comma,u_rbrace,err,k,d)}
    function k$1(d)
     {var _f7_=d[9];
      return _f7_
              ?17732 <= _f7_[1][1]
                ?d[10]
                  ?r_white
                    (function(d)
                      {function r_name(err,k,d)
                        {if(d[8] !== 34)return nxmem(err,k,d);
                         spos(d);
                         function _ga_(d)
                          {return ret$0([0,-633954146,[0,869834347,buf$0(d)]],k,d)}
                         return readc(function(_gb_){return r_string(_ga_,_gb_)},d)}
                       var last_start=d[11];
                       d[11] = 0;
                       d[10] = 0;
                       if(d[8] === 2147483647)
                        {stack_range(d);return ret$0(err_unclosed_obj,k$0,d)}
                       if(d[8] === 125)
                        {dpop(d);
                         return ret$0(_dn_,function(_f$_){return readc(k$1,_f$_)},d)}
                       if(last_start)return r_name(err_exp_obj_fst,k$1,d);
                       if(d[8] === 44)
                        {var
                          _f8_=
                           function(_f__){return r_name(err_exp_name,k$1,_f__)};
                         return readc(function(_f9_){return r_white(_f8_,_f9_)},d)}
                       return nxmem(err_exp_obj_nxt,k$1,d)},
                     d)
                  :r_white
                    (function(d)
                      {d[10] = 1;
                       if(d[8] === 58)
                        {var
                          _gc_=
                           function(_gg_,_gh_){return nxmem(err_exp_value,_gg_,_gh_)},
                          _gd_=function(_gf_){return r_value(_gc_,k$1,_gf_)};
                         return readc(function(_ge_){return r_white(_gd_,_ge_)},d)}
                       return nxmem(err_exp_nsep,k$1,d)},
                     d)
                :r_white
                  (function(d)
                    {function nxval(err,k,d)
                      {spos(d);return discard_to(u_comma,u_rbrack,err,k,d)}
                     var last_start=d[11];
                     d[11] = 0;
                     if(d[8] === 2147483647)
                      {stack_range(d);return ret$0(err_unclosed_arr,k$0,d)}
                     if(d[8] === 93)
                      {dpop(d);
                       return ret$0(_dm_,function(_gq_){return readc(k$1,_gq_)},d)}
                     if(last_start)
                      return r_value
                              (function(_go_,_gp_)
                                {return nxval(err_exp_arr_fst,_go_,_gp_)},
                               k$1,
                               d);
                     if(d[8] === 44)
                      {var
                        _gi_=
                         function(_gm_,_gn_){return nxval(err_exp_value,_gm_,_gn_)},
                        _gj_=function(_gl_){return r_value(_gi_,k$1,_gl_)};
                       return readc(function(_gk_){return r_white(_gj_,_gk_)},d)}
                     return nxval(err_exp_arr_nxt,k$1,d)},
                   d)
              :r_white
                (function(d)
                  {return d[8] === 2147483647
                           ?ret$0(3455931,k$0,d)
                           :(spos(d),discard_to(ux_eoi,ux_eoi,err_exp_eoi,k$0,d))},
                 d)}
    function discard_to_white(err,k,d)
     {if(! is_white(d[8]) && d[8] !== 2147483647)
       {epos(d);
        return readc(function(_f6_){return discard_to_white(err,k,_f6_)},d)}
      return ret$0(err,k,d)}
    function r_json(k,d)
     {function err(k,d)
       {spos(d);
        function _f3_(_f5_){return r_json(k,_f5_)}
        return discard_to_white
                (err_exp_json,function(_f4_){return r_white(_f3_,_f4_)},d)}
      return d[8] !== 2147483647?r_value(err,k,d):ret$0(err_exp_json,k,d)}
    function r_start(d)
     {function _f0_(_f2_){return r_json(k$1,_f2_)}
      function k(_f1_){return r_white(_f0_,_f1_)}
      return readc(function(d){return d[1][11]?ret$0(err_bom,k,d):k(d)},d)}
    var nln=[0,605782321,10];
    function decoder(encoding$0,src)
     {var nln$0=[0,nln];
      if(nln$0)
       {var _fX_=nln$0[1],_fY_=_fX_[1];
        if(3895880 === _fY_)
         var nl=_fX_[2],nl$0=nl,pp=pp_nln_nlf;
        else
         if(605782321 <= _fY_)
          var nl$1=_fX_[2],nl$0=nl$1,pp=pp_nln_ascii;
         else
          var nl$2=_fX_[2],nl$0=nl$2,pp=pp_nln_readline}
      else
       var nl$0=10,pp=pp$0;
      if(encoding$0)
       var
        e=encoding$0[1],
        _fZ_=
         143365725 <= e
          ?423112016 <= e
            ?684370880 <= e?decode_utf_8:decode_us_ascii
            :338302576 <= e?decode_iso_8859_1:decode_utf_16be
          :-211555818 <= e?decode_utf_16:decode_utf_16be,
        k$0=_fZ_,
        encoding=e;
      else
       var k$0=k,encoding=684370880;
      if(typeof src === "number")
       var i_max=0,i_pos=1,i=empty;
      else
       if(438511779 <= src[1])
        var i_max=0,i_pos=1,i=caml_create_bytes(65536);
       else
        var
         s=src[2],
         i_max$0=caml_ml_string_length(s) - 1 | 0,
         i$0=caml_bytes_of_string(s),
         i_max=i_max$0,
         i_pos=0,
         i=i$0;
      var
       utf16=143365725 === encoding?1:0,
       u=
        [0,
         src,
         encoding,
         nln$0,
         nl$0,
         i,
         i_pos,
         i_max,
         caml_create_bytes(4),
         0,
         0,
         0,
         0,
         1,
         0,
         0,
         0,
         function(d,v)
          {if(852405675 <= v[1])
            {var u=v[2];
             if(65279 === u)
              {if(utf16){d[2] = -211558048;d[18] = decode_utf_16be}
               d[11] = 1;
               d[17] = pp;
               return caml_call1(d[18],d)}
             if(65534 === u && utf16)
              {d[2] = -211555818;
               d[18] = decode_utf_16;
               d[11] = 1;
               d[17] = pp;
               return caml_call1(d[18],d)}
             d[11] = 0;
             d[17] = pp;
             return caml_call2(d[17],d,v)}
           d[11] = 0;
           d[17] = pp;
           return caml_call2(d[17],d,v)},
         k$0];
      return [0,u,create$0(1024),0,1,0,1,0,ux_soi,0,0,0,r_start]}
    function expect(e,v)
     {var b=create$0(20),ppf=formatter_of_buffer(b);
      function k(ppf){pp_print_flush(ppf,0);return invalid_arg(contents(b))}
      return caml_call3(kfprintf(k,ppf,fmt),pp_decode,v,e)}
    function o_rem(e){return (e[5] - e[4] | 0) + 1 | 0}
    function flush(k,e)
     {var _fU_=e[1];
      if(typeof _fU_ === "number")
       {e[11]
        =
        function(e,v){return 1006505782 === v?caml_call1(k,e):expect(_dp_,v)};
        return 939392865}
      if(438511779 <= _fU_[1])
       {var oc=_fU_[2],_fV_=e[4],_fW_=e[3],switch$0=0;
        if(0 <= _fV_ && ! ((caml_ml_bytes_length(_fW_) - _fV_ | 0) < 0))
         {caml_ml_output_bytes(oc,_fW_,0,_fV_);switch$0 = 1}
        if(! switch$0)invalid_arg(_e_);
        e[4] = 0;
        return caml_call1(k,e)}
      var b=_fU_[2],o=caml_string_of_bytes(e[3]);
      add_substring(b,o,0,e[4]);
      e[4] = 0;
      return caml_call1(k,e)}
    function writeb(b,k,e)
     {return e[5] < e[4]
              ?flush(function(_fT_){return writeb(b,k,_fT_)},e)
              :(unsafe_set_byte$0(e[3],e[4],b),
                e[4]
                =
                e[4]
                +
                1
                |
                0,
                caml_call1(k,e))}
    function writes(s,j,l,k,e)
     {var rem=o_rem(e);
      if(l <= rem)
       {caml_call1(unsafe_blit(s,j,e[3],e[4]),l);
        e[4] = e[4] + l | 0;
        return caml_call1(k,e)}
      caml_call1(unsafe_blit(s,j,e[3],e[4]),rem);
      e[4] = e[4] + rem | 0;
      var _fQ_=l - rem | 0,_fR_=j + rem | 0;
      return flush(function(_fS_){return writes(s,_fR_,_fQ_,k,_fS_)},e)}
    function writebuf(j,l,k,e)
     {var rem=o_rem(e);
      if(l <= rem)
       {blit$1(e[6],j,e[3],e[4],l);e[4] = e[4] + l | 0;return caml_call1(k,e)}
      blit$1(e[6],j,e[3],e[4],rem);
      e[4] = e[4] + rem | 0;
      var _fN_=l - rem | 0,_fO_=j + rem | 0;
      return flush(function(_fP_){return writebuf(_fO_,_fN_,k,_fP_)},e)}
    function w_indent(k,e)
     {function loop(indent,k,e)
       {function spaces(e,indent)
         {var max=(e[4] + indent | 0) - 1 | 0,_fL_=e[4];
          if(! (max < _fL_))
           {var j=_fL_;
            for(;;)
             {unsafe_set_byte$0(e[3],j,u_sp);
              var _fM_=j + 1 | 0;
              if(max !== j){var j=_fM_;continue}
              break}}
          e[4] = max + 1 | 0;
          return 0}
        var rem=o_rem(e);
        if(rem < indent)
         {spaces(e,rem);
          var _fJ_=indent - rem | 0;
          return flush(function(_fK_){return loop(_fJ_,k,_fK_)},e)}
        spaces(e,indent);
        return caml_call1(k,e)}
      return loop(e[8] * 2 | 0,k,e)}
    function w_json_string(s,k,e)
     {function loop(s,j,pos,max,k,e)
       {var pos$0=pos;
        for(;;)
         {if(max < pos$0)
           return max < j?caml_call1(k,e):writes(s,j,pos$0 - j | 0,k,e);
          var
           next=pos$0 + 1 | 0,
           escape$0=
            function(pos,next)
             {function escape(esc)
               {function _fE_(_fI_){return loop(s,next,next,max,k,_fI_)}
                var _fF_=2,_fG_=0;
                return writes
                        (s,
                         j,
                         pos - j | 0,
                         function(_fH_){return writes(esc,_fG_,_fF_,_fE_,_fH_)},
                         e)}
              return escape},
           escape=escape$0(pos$0,next),
           c=caml_string_unsafe_get(s,pos$0);
          if(10 === c)return escape(_dx_);
          if(34 === c)return escape(_dy_);
          if(92 === c)return escape(_dz_);
          if(31 < c){var pos$0=next;continue}
          var
           hex=function(d){return 10 <= d?65 + (d - 10 | 0) | 0:48 + d | 0},
           _ft_=function(_fD_){return loop(s,next,next,max,k,_fD_)},
           _fu_=hex(c & 15),
           _fv_=function(_fC_){return writeb(_fu_,_ft_,_fC_)},
           _fw_=hex(c >>> 4 | 0),
           _fx_=function(_fB_){return writeb(_fw_,_fv_,_fB_)},
           _fy_=4,
           _fz_=0;
          return writes
                  (s,
                   j,
                   pos$0 - j | 0,
                   function(_fA_){return writes(_dA_,_fz_,_fy_,_fx_,_fA_)},
                   e)}}
      function _fn_(_fs_){return writeb(u_quot,k,_fs_)}
      var _fo_=caml_ml_string_length(s) - 1 | 0,_fp_=0,_fq_=0;
      return writeb
              (u_quot,
               function(_fr_){return loop(s,_fq_,_fp_,_fo_,_fn_,_fr_)},
               e)}
    function w_name(n,k,e)
     {e[10] = 0;
      e[9] = 0;
      return w_json_string(n,function(_fm_){return writeb(u_colon,k,_fm_)},e)}
    function w_value(in_obj,l,k,e)
     {if(typeof l === "number")
       {if(17732 <= l)
         return 870828711 <= l
                 ?(e[10] = 0,e[9] = in_obj,writes(_dB_,0,4,k,e))
                 :(e[10]
                   =
                   1,
                   e[9]
                   =
                   1,
                   e[8]
                   =
                   e[8]
                   +
                   1
                   |
                   0,
                   e[7]
                   =
                   [0,17732,e[7]],
                   writeb(u_lbrace,k,e));
        if(14610 === l)
         {e[10] = 1;
          e[9] = 0;
          e[8] = e[8] + 1 | 0;
          e[7] = [0,14610,e[7]];
          return writeb(u_lbrack,k,e)}}
      else
       {var _fk_=l[1];
        if(! (737456202 <= _fk_))
         {if(365180284 <= _fk_)
           {var f=l[2];
            e[10] = 0;
            e[9] = in_obj;
            clear$1(e[6]);
            var fmt=fmt$0[1],_fl_=e[6],_fj_=0;
            caml_call1
             (make_printf
               (function(acc){bufput_acc(_fl_,acc);return 0},_fj_,fmt),
              f);
            return writebuf(0,e[6][2],k,e)}
          var s=l[2];
          e[10] = 0;
          e[9] = in_obj;
          return w_json_string(s,k,e)}
        if(! (869834347 <= _fk_))
         {var b=l[2];
          e[10] = 0;
          e[9] = in_obj;
          return b?writes(_dC_,0,4,k,e):writes(_dD_,0,5,k,e)}}
      return in_obj
              ?expect(_dr_,[0,-633954146,l])
              :expect(_ds_,[0,-633954146,l])}
    function encode(k,e,v)
     {if(typeof v === "number")
       {if(1006505782 <= v)return 17724;
        if(0 === e[7])return flush(k,e);
        var lstart=hd(e[7]),_eM_=14610 === lstart?_dv_:_dw_;
        return expect(_eM_,v)}
      var _eP_=v[1];
      if(-633954146 === _eP_)
       {var l=v[2];
        if(0 === e[7])return expect(_dq_,[0,-633954146,l]);
        var
         epop=
          function(e)
           {e[10] = 0;
            e[8] = e[8] - 1 | 0;
            var _fg_=e[7];
            if(_fg_)var l=_fg_[2],_fh_=l;else var _fh_=failwith(_q_);
            e[7] = _fh_;
            var _fi_=e[7];
            if(_fi_ && 17732 === _fi_[1]){e[9] = 1;return 0}
            e[9] = 0;
            return 0},
         match=hd(e[7]);
        if(17732 <= match)
         {if(e[9])
           {if(typeof l === "number")
             {if(17718 === l)
               {if(! e[2] && ! e[10])
                 {epop(e);
                  var _eN_=function(_e$_){return writeb(u_rbrace,k,_e$_)};
                  return writeb
                          (u_nl,function(_e__){return w_indent(_eN_,_e__)},e)}
                epop(e);
                return writeb(u_rbrace,k,e)}}
            else
             if(869834347 === l[1])
              {var
                n=l[2],
                name=
                 function(n,k,e)
                  {if(e[2])return w_name(n,k,e);
                   function _fb_(_ff_){return writeb(u_sp,k,_ff_)}
                   function _fc_(_fe_){return w_name(n,_fb_,_fe_)}
                   return writeb
                           (u_nl,function(_fd_){return w_indent(_fc_,_fd_)},e)};
               return e[10]
                       ?name(n,k,e)
                       :writeb(u_comma,function(_fa_){return name(n,k,_fa_)},e)}
            return expect(_dt_,[0,-633954146,l])}
          return w_value(1,l,k,e)}
        if(14596 === l)
         {if(! e[2] && ! e[10])
           {epop(e);
            var _eO_=function(_e9_){return writeb(u_rbrack,k,_e9_)};
            return writeb(u_nl,function(_e8_){return w_indent(_eO_,_e8_)},e)}
          epop(e);
          return writeb(u_rbrack,k,e)}
        var
         value=
          function(l,k,e)
           {if(e[2])return w_value(0,l,k,e);
            var _e4_=0;
            function _e5_(_e7_){return w_value(_e4_,l,k,_e7_)}
            return writeb(u_nl,function(_e6_){return w_indent(_e5_,_e6_)},e)};
        return e[10]
                ?value(l,k,e)
                :writeb(u_comma,function(_e3_){return value(l,k,_e3_)},e)}
      if(-588596599 <= _eP_)
       {var w=v[2];return writes(w,0,caml_ml_string_length(w),k,e)}
      var _eQ_=v[2];
      if(83 <= _eQ_[1])
       {var
         c=_eQ_[2],
         _eR_=function(_e2_){return writeb(u_nl,k,_e2_)},
         _eS_=caml_ml_string_length(c),
         _eT_=0;
        return writes
                (_dE_,
                 0,
                 2,
                 function(_e1_){return writes(c,_eT_,_eS_,_eR_,_e1_)},
                 e)}
      var c$0=_eQ_[2],_eU_=2,_eV_=0;
      function _eW_(_e0_){return writes(_dF_,_eV_,_eU_,k,_e0_)}
      var _eX_=caml_ml_string_length(c$0),_eY_=0;
      return writes
              (_dG_,
               0,
               2,
               function(_eZ_){return writes(c$0,_eY_,_eX_,_eW_,_eZ_)},
               e)}
    function encode_loop(e)
     {e[11] = function(_eK_,_eL_){return encode(encode_loop,_eK_,_eL_)};
      return 17724}
    function encode_json(e,v)
     {if(typeof v === "number")
       {if(1006505782 <= v)return 17724}
      else
       {if(-633954146 !== v[1])
         return encode(function(e){e[11] = encode_json;return 17724},e,v);
        var _eI_=v[2],switch$0=0;
        if(typeof _eI_ === "number")
         {if(14610 !== _eI_ && 17732 !== _eI_ && 870828711 !== _eI_)
           switch$0 = 1}
        else
         {var _eJ_=_eI_[1];
          if(-976970511 !== _eJ_ && 365180284 !== _eJ_ && 737456202 !== _eJ_)
           switch$0 = 1}
        if(! switch$0)return w_value(0,_eI_,encode_loop,e)}
      return expect(_du_,v)}
    function encode$0(e,v){return caml_call2(e[11],e,v)}
    function pp_t(ppf,t)
     {var _eF_=caml_ba_dim_1(t[1]),_eG_=t[3],_eH_=t[2];
      return caml_call4(pp(ppf),_dH_,_eH_,_eG_,_eF_)}
    function string_t(ppf,str)
     {return caml_call2(pp(ppf),_dI_,caml_ml_string_length(str))}
    function create_unsafe(len)
     {var buffer=caml_ba_create(12,0,[0,len]);return [0,buffer,0,len]}
    create_unsafe(0);
    function hexdump_pp(fmt,t)
     {function before(fmt,param)
       {return 0 === param
                ?0
                :8 === param?caml_call1(pp(fmt),_dJ_):caml_call1(pp(fmt),_dK_)}
      function after(fmt,param)
       {return 15 === param?caml_call1(pp(fmt),_dL_):0}
      pp_open_box_gen(fmt,0,1);
      var _eD_=t[3] - 1 | 0,_eC_=0;
      if(! (_eD_ < 0))
       {var i=_eC_;
        for(;;)
         {var column=i % 16 | 0,c=caml_ba_get_1(t[1],t[2] + i | 0);
          caml_call6(pp(fmt),_dM_,before,column,c,after,column);
          var _eE_=i + 1 | 0;
          if(_eD_ !== i){var i=_eE_;continue}
          break}}
      return pp_close_box(fmt,0)}
    caml_call1(caml_call1(pp(std_formatter),fmt$2),hexdump_pp);
    var dst=create_unsafe(0),buflen=0,dstoff=0;
    if((dst[3] - 0 | 0) < 0)
     {var
       b=create$0(20),
       ppf$0=formatter_of_buffer(b),
       k$2=
        function(ppf){pp_print_flush(ppf,0);return invalid_arg(contents(b))};
      caml_call2
       (caml_call4(kfprintf(k$2,ppf$0,fmt$1),string_t,src,pp_t,dst),
        dstoff,
        buflen)}
    else
     caml_blit_string_to_bigstring(src,0,dst[1],dst[2] | 0,0);
    var Escape=[248,_dN_,caml_fresh_oo_id(0)];
    function json_of_src(src)
     {var d=decoder(0,src);
      function dec(param)
       {d[3] = 0;
        var match=caml_call1(d[12],d);
        if(typeof match !== "number")
         {var _eB_=match[1];
          if(-633954146 !== _eB_ && ! (106380200 <= _eB_))
           throw [0,Assert_failure,_do_]}
        if(typeof match === "number")throw [0,Assert_failure,_dO_];
        if(106380200 <= match[1])
         {var e=match[2];throw [0,Escape,[0,[0,d[4],d[5]],[0,d[6],d[7]]],e]}
        var l=match[2];
        return l}
      function value$0(counter,v,k)
       {var switch$0=0;
        if(typeof v === "number")
         {if(14610 === v)
           {var _ey_=0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;return arr$0(counter$1,_ey_,k)}
            return caml_trampoline_return(arr$0,[0,_ey_,k])}
          if(17732 === v)
           {var _ez_=0;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;return obj$0(counter$0,_ez_,k)}
            return caml_trampoline_return(obj$0,[0,_ez_,k])}
          if(870828711 !== v)switch$0 = 1}
        else
         {var _eA_=v[1];
          if(-976970511 !== _eA_ && 365180284 !== _eA_ && 737456202 !== _eA_)
           switch$0 = 1}
        if(switch$0)throw [0,Assert_failure,_dP_];
        return caml_call1(k,v)}
      function arr$0(counter,vs,k)
       {var v=dec(0);
        if(14596 === v)return caml_call1(k,[0,65,rev(vs)]);
        function _ex_(v){return arr([0,v,vs],k)}
        if(counter < 50)
         {var counter$0=counter + 1 | 0;return value$0(counter$0,v,_ex_)}
        return caml_trampoline_return(value$0,[0,v,_ex_])}
      function obj$0(counter,ms,k)
       {var match=dec(0);
        if(typeof match === "number")
         {if(17718 === match)return caml_call1(k,[0,79,rev(ms)])}
        else
         if(869834347 === match[1])
          {var
            n=match[2],
            _ev_=function(v){return obj([0,[0,n,v],ms],k)},
            _ew_=dec(0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return value$0(counter$0,_ew_,_ev_)}
           return caml_trampoline_return(value$0,[0,_ew_,_ev_])}
        throw [0,Assert_failure,_dQ_]}
      function value(v,k){return caml_trampoline(value$0(0,v,k))}
      function arr(vs,k){return caml_trampoline(arr$0(0,vs,k))}
      function obj(ms,k){return caml_trampoline(obj$0(0,ms,k))}
      try
       {var _et_=function(x){return x},_eu_=[0,824773160,value(dec(0),_et_)];
        return _eu_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Escape)
         {var e=exn[3],r=exn[2];return [0,106380200,[0,r,e]]}
        throw exn}}
    var Parse_error=[248,_dR_,caml_fresh_oo_id(0)];
    function from_string(str)
     {var src=[0,-976970511,str],match=json_of_src(src);
      if(824773160 <= match[1])
       var t=match[2],_es_=t;
      else
       {var match$0=match[2],e=match$0[2];
        pp_error(ppf,e);
        pp_flush_queue(ppf,0);
        var s=contents(buf);
        buf[2] = 0;
        buf[1] = buf[4];
        buf[3] = caml_ml_bytes_length(buf[1]);
        var
         t$0=870828711,
         _es_=
          caml_call1
           (ksprintf(function(msg){throw [0,Parse_error,t$0,msg]},fmt$3),s)}
      if(typeof _es_ !== "number")
       {var _er_=_es_[1],switch$0=0;
        if(65 === _er_ || 79 === _er_)switch$0 = 1;
        if(switch$0)return _es_}
      throw [0,Parse_error,_es_,_dS_]}
    function find(j,p)
     {var j$0=j,p$0=p;
      for(;;)
       {if(p$0)
         {if(typeof j$0 !== "number" && 79 === j$0[1])
           {var o=j$0[2],tl=p$0[2],h=p$0[1],j$1=assoc(h,o),j$0=j$1,p$0=tl;
            continue}
          throw Not_found}
        return j$0}}
    caml_fresh_oo_id(0);
    var fn=undefined;
    function of_option(none,conv,param)
     {if(param){var v=param[1];return caml_call1(conv,v)}return none}
    var target=globalThis;
    function set_if_some(o,p,param)
     {if(param){var f=param[1];return o[p] = f}return 0}
    var Error$0=[248,_dT_,caml_fresh_oo_id(0)];
    register_exception(_dU_,[0,Error$0,{}]);
    var promise=target.Promise;
    function resolve(v){return promise.resolve(v)}
    function return$0(v){return {"fut":resolve(v)}}
    function bind(f,fn)
     {function res(v){return caml_call1(fn,v).fut}
      var p=f.fut;
      return {"fut":p.then(res)}}
    function of_promise(ok,v)
     {function res(v){return resolve([0,caml_call1(ok,v)])}
      function rej(e){return resolve([1,e])}
      return {"fut":v.then(res,rej)}}
    var json=target.JSON;
    function encode$1(v){return json.stringify(v)}
    function call(c,meth,args){caml_js_meth_call(c,meth,args);return 0}
    var _dV_=target.console;
    function msg_to_jv_array(msg)
     {var a=new (target.Array)(0),i=0,param=msg;
      for(;;)
       {if(param)
         {var vs=param[2],v=param[1];
          a[i] = v;
          var i$0=i + 1 | 0,i=i$0,param=vs;
          continue}
        return caml_js_to_array(a)}}
    function log(msg){return call(_dV_,_dW_,msg_to_jv_array(msg))}
    function error(msg){return call(_dV_,_dX_,msg_to_jv_array(msg))}
    var headers=target.Headers,fetch=target.fetch;
    function display_pkgs(param)
     {var
       version=param[3],
       name=param[2],
       id=param[1],
       tbody=t1.getElementById("opam_packages");
      if(tbody == no_handler)throw [0,Assert_failure,_d6_];
      var tr=unsafeCreateElement(t1,_cb_),td1=createTd(t1);
      td1.innerHTML = caml_jsstring_of_string(id);
      appendChild(tr,td1);
      var td2=createTd(t1);
      td2.innerHTML = caml_jsstring_of_string(name);
      appendChild(tr,td2);
      var td3=createTd(t1);
      td3.innerHTML = caml_jsstring_of_string(version);
      appendChild(tr,td3);
      return appendChild(tbody,tr)}
    function get_string(key,l)
     {var match=assoc(key,l);
      if(typeof match !== "number" && -976970511 === match[1])
       {var s=match[2];return s}
      throw Not_found}
    function formatPackages(packages)
     {try
       {var
         pkgs=caml_string_of_jsstring(encode$1(packages)),
         json=from_string(pkgs),
         json$0=find(json,_d8_),
         switch$0=0;
        if(typeof json$0 !== "number" && 65 === json$0[1])
         {var
           pkgs$0=json$0[2],
           add_pkg=
            function(l,param)
             {if(typeof param !== "number" && 79 === param[1])
               {var
                 pkg=param[2],
                 id=get_string(_d9_,pkg),
                 name=get_string(_d__,pkg),
                 version=get_string(_d$_,pkg);
                return [0,[0,id,name,version],l]}
              return l},
           _eq_=iter(display_pkgs,rev(fold_left(add_pkg,0,pkgs$0)));
          switch$0 = 1}
        if(! switch$0)var _eq_=log([0,caml_jsstring_of_string(pkgs),0]);
        return _eq_}
      catch(e)
       {e = caml_wrap_exception(e);
        return error([0,caml_jsstring_of_string(symbol(_d7_,to_string(e))),0])}}
    var
     json$0=[0,79,[0,[0,_ea_,[0,-976970511,package_query]],0]],
     buf$1=create$0(1024),
     dst$0=[0,86585632,buf$1],
     sth=1;
    function enc(e,l){encode$0(e,[0,-633954146,l]);return 0}
    function value$0(counter,v,k,e)
     {if(typeof v !== "number")
       {var _ep_=v[1];
        if(65 <= _ep_ && ! (365180284 <= _ep_))
         {if(79 <= v[1])
           {var ms=v[2];
            enc(e,17732);
            if(counter < 50)
             {var counter$0=counter + 1 | 0;return obj_ms$0(counter$0,ms,k,e)}
            return caml_trampoline_return(obj_ms$0,[0,ms,k,e])}
          var vs=v[2];
          enc(e,14610);
          if(counter < 50)
           {var counter$1=counter + 1 | 0;return arr_vs$0(counter$1,vs,k,e)}
          return caml_trampoline_return(arr_vs$0,[0,vs,k,e])}}
      enc(e,v);
      return caml_call1(k,e)}
    function arr_vs$0(counter,vs,k,e)
     {if(vs)
       {var
         vs$0=vs[2],
         v=vs[1],
         _en_=function(_eo_){return arr_vs(vs$0,k,_eo_)};
        if(counter < 50)
         {var counter$0=counter + 1 | 0;return value$0(counter$0,v,_en_,e)}
        return caml_trampoline_return(value$0,[0,v,_en_,e])}
      enc(e,14596);
      return caml_call1(k,e)}
    function obj_ms$0(counter,ms,k,e)
     {if(ms)
       {var ms$0=ms[2],match=ms[1],v=match[2],n=match[1];
        enc(e,[0,869834347,n]);
        var _el_=function(_em_){return obj_ms(ms$0,k,_em_)};
        if(counter < 50)
         {var counter$0=counter + 1 | 0;return value$0(counter$0,v,_el_,e)}
        return caml_trampoline_return(value$0,[0,v,_el_,e])}
      enc(e,17718);
      return caml_call1(k,e)}
    function value(v,k,e){return caml_trampoline(value$0(0,v,k,e))}
    function arr_vs(vs,k,e){return caml_trampoline(arr_vs$0(0,vs,k,e))}
    function obj_ms(ms,k,e){return caml_trampoline(obj_ms$0(0,ms,k,e))}
    var
     opt$0=[0,sth],
     minify=opt$0?sth:1,
     o=caml_create_bytes(65536),
     e=[0,dst$0,minify,o,0,65535,create$0(30),0,0,0,0,encode_json];
    function finish(e){encode$0(e,3455931);return 0}
    value(json$0,finish,e);
    var query_json=contents(buf$1);
    function f(param)
     {function k(_ek_){return 0}
      var
       method=[0,"POST"],
       l=[0,[0,"Content-Type","application/json"],0],
       hs=new headers(),
       signal=0,
       referrer_policy=0,
       referrer=0,
       redirect=0,
       mode=0,
       integrity=0;
      iter
       (function(param){var v=param[2],k=param[1];hs.append(k,v);return 0},l);
      var
       headers$0=[0,hs],
       body=[0,caml_jsstring_of_string(query_json)],
       init={},
       credentials=0,
       cache=0;
      init.body = of_option(fn,function(_ej_){return _ej_},body);
      set_if_some(init,_dY_,cache);
      set_if_some(init,_dZ_,credentials);
      var _eb_=headers$0?[0,hs]:0;
      if(_eb_){var v=_eb_[1];init.headers = v}
      set_if_some(init,_d0_,integrity);
      set_if_some(init,_d1_,method);
      set_if_some(init,_d2_,mode);
      set_if_some(init,_d3_,redirect);
      set_if_some(init,_d4_,referrer);
      set_if_some(init,_d5_,referrer_policy);
      init.signal = of_option(fn,function(_ei_){return _ei_},signal);
      var opt=[0,init];
      function _ed_(result)
       {if(0 === result[0])
         {var
           response=result[1],
           _eg_=
            function(data)
             {if(0 === data[0])
               {var response=data[1];
                formatPackages(response);
                return return$0(0)}
              error([0,"ERROR",0]);
              return return$0(0)},
           _ef_=response.json();
          return bind(of_promise(function(_eh_){return _eh_},_ef_),_eg_)}
        error([0,"ERROR",0]);
        return return$0(0)}
      var
       init$0=opt?init:{},
       _ec_=fetch("http://localhost:8080/graphql",init$0),
       f=bind(of_promise(function(_ee_){return _ee_},_ec_),_ed_),
       p=f.fut;
      p.then(k);
      return false$0}
    window.onload
    =
    function(e)
     {if(1 - (e == no_handler?1:0))
       {var res=f(e);if(1 - (res | 0))e.preventDefault();return res}
      var e$0=event,res$0=f(e$0);
      if(1 - (res$0 | 0))e$0.returnValue = res$0;
      return res$0};
    caml_call1(exit_function[1],0);
    return}
  (function(){return this}()));

//# sourceMappingURL=main.map
